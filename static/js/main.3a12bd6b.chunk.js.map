{"version":3,"sources":["store/action-types/loginActionTypes.ts","store/actions/loginAction.ts","store/action-types/userActionTypes.ts","constants/Api.ts","store/action-creators/loginActionCreators.ts","store/actions/userActions.ts","store/action-types/roleActionTypes.ts","store/action-creators/userActionCreators.ts","store/actions/roleActions.ts","store/action-types/companyActionTypes.ts","store/action-creators/roleActionCreators.ts","store/actions/companyActions.ts","store/action-types/bookingsActionTypes.ts","store/action-creators/companyActionCreators.ts","store/actions/bookingsAction.ts","store/action-creators/bookingsActionCreators.ts","components/signin-view/sign-in-form/SignInFormValidation.ts","components/signin-view/sign-in-form/SignInForm.tsx","components/signin-view/SignInView.tsx","container/sign-in/SignIn.tsx","components/common/drawer/drawer-components/DrawerMenuItem.tsx","components/common/drawer/drawer-components/DrawerMenuSubItem.tsx","components/common/drawer/drawer-components/DrawerLayout.tsx","components/common/drawer/GDrawer.tsx","constants/ContextPaths.ts","components/common/ground-up-tabs/GroundUpTabs.tsx","components/common/notification-drawer/NotificationItem/NotificationItem.tsx","components/common/notification-drawer/NotificationDrawer.tsx","components/common/header/GroundUpAppBar.tsx","components/common/table/GTable.tsx","components/common/date-picker/GDatePicker.tsx","components/common/select/GSelect.tsx","components/booking-view/filters/criteria-filter/CriteriaFilter.tsx","components/common/toggle-group/GToggleButtonGroup.tsx","components/booking-view/filters/status-filter/StatusFilter.tsx","components/booking-view/filters/Filters.tsx","components/booking-view/request-new/RequestNewFormValidation.ts","components/common/dialog/GDialog.tsx","components/common/input/GInput.tsx","components/booking-view/request-new/RequestNew.tsx","components/common/button/GButton.tsx","util/utility.tsx","components/booking-view/BookingView.tsx","components/common/pane/GPane.tsx","mockData/StatusHeaderData.tsx","components/common/buttonGroup/GButtonGroup.tsx","components/common/status-header/StatusHeader.tsx","components/booking-review-view/BookingReviewView.tsx","components/grant-chart-view/criteria-filter/CriteriaFilter.tsx","components/grant-chart-view/grantt-chart/ChartRow.tsx","components/common/toast/GToast.tsx","components/grant-chart-view/grantt-chart/index.tsx","components/grant-chart-view/GranttChartView.tsx","container/home/Home.tsx","components/common/checkobx/GCheckbox.tsx","components/notification-view/NotificationView.tsx","mockData/AdminPanel.tsx","components/admin-view/management/activity/add-activity/ActivityValidation.tsx","components/admin-view/management/activity/add-activity/AddActivity.tsx","components/admin-view/management/activity/ActivityManagement.tsx","components/admin-view/management/crane-booking/CraneBookingManagement.tsx","components/common/textarea/GTextarea.tsx","components/admin-view/management/maintenance/add-schedule/ScheduleFormValidation.tsx","components/admin-view/management/maintenance/add-schedule/AddSchedule.tsx","components/admin-view/management/maintenance/MaintenanceManagement.tsx","components/admin-view/management/material/add-material/AddMaterialFormValidation.tsx","components/admin-view/management/material/add-material/AddMaterial.tsx","components/admin-view/management/material/MaterialManagement.tsx","components/admin-view/management/reports/ReportsManagement.tsx","components/admin-view/management/role/add-role/RoleFormValidation.tsx","components/admin-view/management/role/add-role/AddRole.tsx","components/admin-view/management/role/RoleManagement.tsx","components/admin-view/management/user/add-user/AddUserFormValidation.tsx","components/admin-view/management/user/add-user/AddUser.tsx","components/admin-view/management/user/edit-user/EditUser.tsx","components/admin-view/management/user/UserManagement.tsx","components/admin-view/management/company/add-company/CompanyFormValidation.tsx","components/admin-view/management/company/add-company/AddCompany.tsx","components/admin-view/management/company/CompanyManagement.tsx","components/admin-view/AdminView.tsx","container/settings/Settings.tsx","Theme.tsx","container/sample/Sample.tsx","HttpInterceptor.tsx","App.tsx","reportWebVitals.ts","store/reducers/userReducer.ts","store/reducers/bookings.ts","store/reducers/loginReducer.ts","store/reducers/roleReducer.ts","store/reducers/companyReducer.ts","store/reducers/index.ts","store/store.ts","index.tsx"],"names":["LoginActionTypes","userActionTypes","createUserActionTypes","deleteUserActionTypes","editUserActionTypes","LOGIN_USER","loginUser","email","password","dispatch","a","axios","post","then","response","username","localStorage","setItem","data","token","type","LOGGED_IN_USER","payload","catch","error","LOGGED_IN_USER_FAILED","RolesActionTypes","fetchUsers","GET_USERS","users","GET_USERS_SUCCESS","message","GET_USERS_FAILED","createNewUser","name","role","company","CREATE_USER","CREATE_USER_SUCCESS","CREATE_USER_FAILED","removeUser","userId","_id","DELETE_USER","delete","DELETE_USER_SUCCESS","DELETE_USER_FAILED","updateUser","EDIT_USER","put","EDIT_USER_SUCCESS","EDIT_USER_FAILED","CompanyActionTypes","fetchRoles","GET_ROLES","get","roles","GET_ROLES_SUCCESS","GET_ROLES_FAILED","BookingsActionTypes","createCompanyAction","CREATE_COMPANY","fetchCompany","GET_COMPANY","Company","GET_COMPANY_SUCCESS","GET_COMPANY_FAILED","createCompany","address","phone","CREATE_COMPANY_SUCCESS","CREATE_COMPANY_FAILED","deleteCompany","DELETE_COMPANY_SUCCESS","DELETE_COMPANY_FAILED","bookingsSuccess","ALL_BOOKINGS","getBookings","BOOKINGS_FAILED","signInValidationSchema","Yup","shape","required","min","SignInForm","props","formik","useFormik","initialValues","validationSchema","onSubmit","handleSubmit","Box","component","TextField","margin","fullWidth","id","label","autoComplete","autoFocus","value","values","onChange","handleChange","touched","Boolean","errors","helperText","Button","variant","sx","mt","mb","SignInView","useDispatch","history","useHistory","bindActionCreators","loginActionCreators","status","useSelector","state","login","useEffect","push","Container","maxWidth","CssBaseline","className","Avatar","m","bgcolor","Typography","SignIn","DrawerMenuItem","item","useState","activeMenu","setActiveMenu","listen","location","pathname","ListItem","button","selected","indexOf","onClick","ListItemText","text","notifications","Badge","badgeContent","color","style","left","DrawerSubMenuItem","openMenu","setOpenMenu","activeSubMenu","setActiveSubMenu","marginLeft","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","subMenu","map","subItem","List","disablePadding","menuClicked","padding","ListItemIcon","clsx","DrawerLayout","Toolbar","overflow","items","index","drawerWidth","GroundUpDrawer","display","Drawer","open","mobileOpen","onClose","handleDrawerToggle","ModalProps","keepMounted","xs","sm","width","flexShrink","boxSizing","marginTop","md","flex","children","HOME","USER","BOOKING","HOME_BOOKING","HOME_BOOKING_REVIEW","HOME_GRANTT_CHART","USER_ADMIN","USER_NOTIFICATION","USER_ADMIN_USER_MANAGEMENT","USER_ADMIN_ROLE_MANAGEMENT","USER_ADMIN_MATERIAL_MANAGEMENT","USER_ADMIN_ACTIVITY_MANAGEMENT","USER_ADMIN_MAINTENANCE_MANAGEMENT","USER_ADMIN_CRANE_BOOKING_MANAGEMENT","USER_ADMIN_REPORTS_MANAGEMENT","USER_ADMIN_COMPANY_MANAGEMENT","GroundUpTabs","tabs","icon","event","newValue","setIndex","Tabs","Tab","a11yProps","NotificationItem","category","time","removeNotification","Fragment","filter","_","i","fontSize","NotificationItems","length","alt","src","NotificationDrawer","anchor","openNotificationDrawer","setopenNotificationDrawer","GroundUpAppBar","React","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMenuOpen","isMobileMenuOpen","handleProfileMenuOpen","currentTarget","handleMobileMenuClose","handleMenuClose","renderMenu","Menu","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","mobileMenuId","renderMobileMenu","IconButton","size","textTransform","flexGrow","AppBar","position","zIndex","theme","drawer","edge","mr","height","marginRight","maxHeight","headerTab","setHeaderTab","alignItems","border","GTable","page","setPage","rowsPerPage","setRowsPerPage","rows","columns","useTheme","Paper","palette","secondary","main","TableContainer","Table","stickyHeader","paddingTop","TableHead","TableRow","column","TableCell","align","minWidth","borderBottom","grey","TableBody","slice","row","hover","tabIndex","rowClicked","format","EditOutlined","editlicked","DeleteOutlined","deleteClicked","code","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","target","GFormDatePicker","dateDelete","timeonly","setFieldValue","timeProps","datepickerRef","useRef","handleClickDatepickerIcon","datepickerElement","current","setFocus","InputLabel","ref","GDatePicker","date","placeholderText","GFormSelect","options","select","e","inputProps","key","GSelect","placeholder","href","SelectProps","MenuProps","classes","list","CriteriaFilter","crane","setCrane","zone","setZone","setDate","GToggleButtonGroup","formats","singleSelect","setFormats","ToggleButtonGroup","newFormats","ToggleButton","StatusFilter","Filters","requestNewValidationSchema","contractor","GDialog","scroll","showDialog","Dialog","disablePortal","DialogTitle","title","DialogContent","dividers","DialogContentText","DialogActions","justifyContent","form","GFormInput","Input","onBlur","validateField","RequestNew","validateOnChange","Grid","container","GButton","startIcon","endIcon","tConvert","timeString","H","substr","ampm","BookingView","setSelectData","setOpen","search","useLocation","bookingsActionCreators","bookings","loading","bookingManagementRows","setBookingManagementRows","tempBookingManagementRows","formatData","TimeStart","TimeEnd","Zone","Crane","TaskType","Status","selectedMonthName","parseInt","substring","toString","dateFormator","split","join","timeStart","timeEnd","taskType","backgroundColor","dataOne","formattedData","query","URLSearchParams","selectData","handleSelectData","GPane","StatusData","GButtonGroup","btnStyle","buttonClassName","listClassName","optionClassName","StatusHeader","ButtonTitle","ButtonGroupTitle","primary","BookingReviewView","Link","underline","selectDistinctCranes","lookup","result","crane_id","reduxState","cranes","booking","ChartRow","rowData","craneColor","liftType","Alert","elevation","GToast","autoHideDuration","Stack","spacing","Snackbar","notificationToggleState","severity","totalMinutesInaDay","dayRightColumns","GranttChart","selectedDate","selectedCrane","newdata","setData","rightColumns","setRightColumns","toastOpen","setToastOpen","weekRightColumns","curr","Date","week","first","getDate","getDay","day","toDateString","getLeftPercentageDay","startTime","startDate","getHours","getMinutes","getLeftPercentageWeek","timeInMinutes","days","minutesToAdd","dateMatched","selectedDay","getMonth","getFullYear","filteredBookings","craneName","craneMatched","checkForDaysMatch","start_time","endTime","end_time","createdAt","getTime","checkForSelctedValuesMatch","LinearProgress","leftColumn","rightColumn","GranttChartView","Home","drawerItems","path","exact","GCheckbox","Checkbox","checked","NotificationView","allNotifications","machineIlding_SS","machineIlding_PM","bookingSchheduling_PM","bookingSchheduling_DPCM","bookingApproval_DPCM","bookingApproval_PM","Divider","notif","UserManagementColumns","MaterialColumns","MaterialRows","image","imageCount","materialName","action","RoleColumns","ActivityColumns","ActivityRows","activityName","hoursTaken","MaintenanceColumns","MaintenanceRows","scheduleName","scheduleType","schedule","duration","assignedTo","CraneManagementColumns","CraneUsageRows","bookingHours","bookingDays","CompanyColumns","AddActivityFormValidation","activity","AddActivity","ActivityValidation","ActivityManagement","CraneBookingManagement","GTextarea","hiddenLabel","multiline","CompanyFormValidation","contracter","maintenance","recurranceDate","nullable","typeError","description","AddSchedule","ScheduleFormValidation","MaintenanceManagement","AddMaterialFormValidation","material","AddMaterial","MaterialValidation","MaterialManagement","ReportsManagement","booking_BS","booking_BRL","crane_CUS","crane_CUR","crane_IML","maintainence_PMR","maintainence_ML","RoleFormValidation","checkBoxes","AddRole","machineIdling","approvedRejectedBooking","rescheduleBooking","canelledBooking","updateBooking","newbooking","RoleManagement","roleActionCreators","roleManagementRows","setRoleManagementRows","tempRoleManagementRows","AddUserFormValidation","AddUser","userActionCreators","createUser","companyActionCreators","companyOptions","setCompanyOptions","rolesOptions","setRolesOptions","tempCompanies","companyDetails","tempRoles","roleDetails","EditUser","editUserData","initialState","UserManagement","openEditDialog","setOpenEditDialog","user","deleteLError","deleteLoading","setEditUserData","userManagementRows","setUserManagementRows","tempUserManagementRows","userRole","AddCompany","CompanyManagement","companyManagementRows","setcompanyManagementRows","tempcompanyManagementRows","AdminView","Settings","createTheme","typography","h3","fontWeight","h4","h5","h6","subtitle2","body1","paneheader","lineHeight","dark","contrastText","success","green","components","MuiAppBar","styleOverrides","root","Sample","HttpInterceptor","BASE_URL","interceptors","request","use","url","headers","getItem","err","Promise","reject","console","log","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","UserReducer","createUserInitialState","deleteInitialState","editUserInitialState","editLoading","editLError","bookingReducer","loginReducer","roleReducer","companyReducer","createCompanyInitialState","deleteCompanyInitialState","reducers","combineReducers","userReducer","editUser","DELETE_COMPANY","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a12bd6b.chunk.js","sourcesContent":["export enum LoginActionTypes{\n    LOGGED_IN_USER = \"LOGGED_IN_USER\",\n    LOGGED_IN_USER_FAILED = \"LOGGED_IN_USER_FAILED\"\n}","import {LoginActionTypes} from '../action-types/loginActionTypes'\n\ninterface LoginAction{\n    type: LoginActionTypes.LOGGED_IN_USER\n    payload: string\n}\n\ninterface LoginActionFailed{\n    type: LoginActionTypes.LOGGED_IN_USER_FAILED\n    payload: string\n}\n\nexport type Action = LoginAction | LoginActionFailed;\n\nexport const loginUserSuccess = (username:string):LoginAction=>{\n    return {\n        type: LoginActionTypes.LOGGED_IN_USER,\n        payload: username\n    }\n}\n\nexport const loginUserFailed = (username:string):LoginActionFailed=>{\n    return {\n        type: LoginActionTypes.LOGGED_IN_USER_FAILED,\n        payload: username\n    }\n}","export enum userActionTypes{\n    GET_USERS = \"GET_USERS\",\n    GET_USERS_FAILED = \"GET_USERS_FAILED\",\n    GET_USERS_SUCCESS = \"GET_USERS_SUCCESS\"\n}\n\nexport enum createUserActionTypes{\n    CREATE_USER = \"CREATE_USER\",\n    CREATE_USER_FAILED = \"CREATE_USER_FAILED\",\n    CREATE_USER_SUCCESS = \"CREATE_USER_SUCCESS\"\n}\n\nexport enum deleteUserActionTypes{\n    DELETE_USER = \"DELETE_USER\",\n    DELETE_USER_FAILED = \"DELETE_USER_FAILED\",\n    DELETE_USER_SUCCESS = \"DELETE_USER_SUCCESS\"\n}\n\nexport enum editUserActionTypes{\n    EDIT_USER = \"EDIT_USER\",\n    EDIT_USER_FAILED = \"EDIT_USER_FAILED\",\n    EDIT_USER_SUCCESS = \"EDIT_USER_SUCCESS\"\n}","export const LOGIN_USER = '/signin';\n\n// Users\nexport const GET_USERS = '/users';\nexport const CREATE_USER = '/user/create';\nexport const DELETE_USER = '/user/delete/';\nexport const UPDATE_USER = '/user/update/';\n\n// Roles\nexport const GET_ROLES = '/role';\n\n// Company\nexport const GET_COMPANY = '/companies';\nexport const CREATE_COMPANY = '/company/create';\nexport const DELETE_COMPANY = '/company/delete/';\n\nexport const BOOKINGS = '/bookings';\n\n","import { Dispatch } from 'redux';\nimport {Action, loginUserFailed, loginUserSuccess} from '../actions/loginAction';\nimport axios from 'axios';\nimport { LOGIN_USER } from '../../constants/Api';\nimport { ThunkAction } from 'redux-thunk';\nimport { RootState } from '../reducers';\n\nexport type AppThunk<R> = ThunkAction<R, RootState, null, Action>;\n\nexport const loginUser = (email:string, password:string): AppThunk<void> =>{\n     return async (dispatch: Dispatch<Action>)=> {\n        return await axios.post(LOGIN_USER, {email, password})\n        .then(response=>{\n            localStorage.setItem('token', response.data.token)\n            dispatch(loginUserSuccess(email));\n        }).catch(error=>{\n            dispatch(loginUserFailed(email));\n        });\n    }\n}\n","import { userActionTypes, createUserActionTypes, deleteUserActionTypes, editUserActionTypes } from '../action-types/userActionTypes';\n\n// getUser\n\ninterface GetUsersAction {\n    type: userActionTypes.GET_USERS,\n}\n\ninterface GetUsersFailed {\n    type: userActionTypes.GET_USERS_FAILED,\n    payload: string\n}\n\ninterface GetUsersSuccess {\n    type: userActionTypes.GET_USERS_SUCCESS,\n    payload: []\n}\n\nexport const getUsers = (): GetUsersAction => {\n    return {\n        type: userActionTypes.GET_USERS\n    }\n}\n\nexport const getUsersFailed = (message: string): GetUsersFailed => {\n    return {\n        type: userActionTypes.GET_USERS_FAILED,\n        payload: message\n    }\n}\n\nexport const getUsersSuccess = (users: []): GetUsersSuccess => {\n    return {\n        type: userActionTypes.GET_USERS_SUCCESS,\n        payload: users\n    }\n}\n\n// createUser\n\ninterface CreateUserAction {\n    type: createUserActionTypes.CREATE_USER,\n}\n\ninterface CreateUserFailed {\n    type: createUserActionTypes.CREATE_USER_FAILED,\n    payload: string\n}\n\ninterface CreateUserSuccess {\n    type: createUserActionTypes.CREATE_USER_SUCCESS\n}\n\n\nexport const createUser = (): CreateUserAction => {\n    return {\n        type: createUserActionTypes.CREATE_USER,\n    }\n}\n\nexport const createUserFailed = (message: string): CreateUserFailed => {\n    return {\n        type: createUserActionTypes.CREATE_USER_FAILED,\n        payload: message\n    }\n}\n\nexport const createUserSuccess = (): CreateUserSuccess => {\n    return {\n        type: createUserActionTypes.CREATE_USER_SUCCESS,\n    }\n}\n\n// deleteUser\n\ninterface DeleteUserAction {\n    type: deleteUserActionTypes.DELETE_USER,\n    payload: number\n}\n\ninterface DeleteUserFailed {\n    type: deleteUserActionTypes.DELETE_USER_FAILED,\n    payload: string\n}\n\ninterface DeleteUserSuccess {\n    type: deleteUserActionTypes.DELETE_USER_SUCCESS\n}\n\n\nexport const deleteUser = (_id: number): DeleteUserAction => {\n    return {\n        type: deleteUserActionTypes.DELETE_USER,\n        payload: _id\n    }\n}\n\n\nexport const deleteUserFailed = (message: string): DeleteUserFailed => {\n    return {\n        type: deleteUserActionTypes.DELETE_USER_FAILED,\n        payload: message\n    }\n}\n\nexport const deleteUserSuccess = (): DeleteUserSuccess => {\n    return {\n        type: deleteUserActionTypes.DELETE_USER_SUCCESS,\n    }\n}\n\n// edit user\n\ninterface EditUserAction {\n    type: editUserActionTypes.EDIT_USER\n}\n\ninterface EditUserFailed {\n    type: editUserActionTypes.EDIT_USER_FAILED,\n    payload: string\n}\n\ninterface EditUserSuccess {\n    type: editUserActionTypes.EDIT_USER_SUCCESS\n}\n\n\nexport const editUser = (): EditUserAction => {\n    return {\n        type: editUserActionTypes.EDIT_USER\n    }\n}\n\nexport const editUserFailed = (message: string): EditUserFailed => {\n    return {\n        type: editUserActionTypes.EDIT_USER_FAILED,\n        payload: message\n    }\n}\n\nexport const editUserSuccess = (): EditUserSuccess => {\n    return {\n        type: editUserActionTypes.EDIT_USER_SUCCESS,\n    }\n}\n\nexport type Action = EditUserAction | EditUserFailed | EditUserSuccess | DeleteUserAction | DeleteUserSuccess | DeleteUserFailed | GetUsersAction | GetUsersFailed | GetUsersSuccess | CreateUserSuccess | CreateUserFailed | CreateUserAction;\n","export enum RolesActionTypes{\n    GET_ROLES = \"GET_ROLES\",\n    GET_ROLES_FAILED = \"GET_ROLES_FAILED\",\n    GET_ROLES_SUCCESS = \"GET_ROLES_SUCCESS\"\n}","import { Dispatch } from 'redux';\nimport { Action, getUsersSuccess, getUsers, getUsersFailed, createUser, createUserFailed, createUserSuccess, deleteUser, deleteUserFailed, deleteUserSuccess, editUser, editUserFailed, editUserSuccess } from '../actions/userActions';\nimport axios from 'axios';\nimport { GET_USERS, CREATE_USER, DELETE_USER ,UPDATE_USER} from '../../constants/Api';\nimport { ThunkAction } from 'redux-thunk';\nimport { RootState } from '../reducers';\n\nexport type AppThunk<R> = ThunkAction<R, RootState, null, Action>;\n\nexport const fetchUsers = (): AppThunk<void> => {\n    return async (dispatch: Dispatch<Action>) => {\n        dispatch(getUsers());\n        return await axios.post(GET_USERS, {})\n            .then(response => {\n                dispatch(getUsersSuccess(response.data.data));\n            }).catch(error => {\n                dispatch(getUsersFailed(error.message));\n            });\n    }\n}\n\nexport const createNewUser = (email: string, password: string, name: string, role: string | number, company: string | number): AppThunk<void> => {\n    return async (dispatch: Dispatch<Action>) => {\n        dispatch(createUser());\n        return await axios.post(CREATE_USER, { email, name, password, company, role })\n            .then(response => {\n                dispatch(createUserSuccess());\n            }).catch(error => {\n                dispatch(createUserFailed(error));\n            });\n    }\n}\n\nexport const removeUser = (userId: number): AppThunk<void> => {\n    return async (dispatch: Dispatch<Action>) => {\n        dispatch(deleteUser(userId));\n        return await axios.delete(DELETE_USER + userId, {})\n            .then(response => {\n                dispatch(deleteUserSuccess());\n            }).catch(error => {\n                dispatch(deleteUserFailed(error));\n            });\n    }\n}\n\nexport const updateUser = (userId: number, email: string, name: string): AppThunk<void> => {\n    return async (dispatch: Dispatch<Action>) => {\n        dispatch(editUser());\n        return await axios.put(UPDATE_USER + userId, { email, name })\n            .then(response => {\n                dispatch(editUserSuccess());\n            }).catch(error => {\n                dispatch(editUserFailed(error));\n            });\n    }\n}\n","import { RolesActionTypes } from '../action-types/roleActionTypes';\n\ninterface GetRoleAction {\n    type: RolesActionTypes.GET_ROLES,\n}\n\ninterface GetRoleFailed {\n    type: RolesActionTypes.GET_ROLES_FAILED,\n    payload: string\n}\n\ninterface GetRoleSuccess {\n    type: RolesActionTypes.GET_ROLES_SUCCESS,\n    payload: []\n}\n\nexport type Action = GetRoleAction | GetRoleFailed | GetRoleSuccess;\n\nexport const fetchRole = (): GetRoleAction => {\n    return {\n        type: RolesActionTypes.GET_ROLES\n    }\n}\n\nexport const fetchRoleFailed = (message: string): GetRoleFailed => {\n    return {\n        type: RolesActionTypes.GET_ROLES_FAILED,\n        payload: message\n    }\n}\n\nexport const fetchRoleSuccess = (roles: []): GetRoleSuccess => {\n    return {\n        type: RolesActionTypes.GET_ROLES_SUCCESS,\n        payload: roles\n    }\n}","export enum CompanyActionTypes{\n    GET_COMPANY = \"GET_COMPANY\",\n    GET_COMPANY_FAILED = \"GET_COMPANY_FAILED\",\n    GET_COMPANY_SUCCESS = \"GET_COMPANY_SUCCESS\",\n\n    CREATE_COMPANY = \"CREATE_COMPANY\",\n    CREATE_COMPANY_FAILED = \"CREATE_COMPANY_FAILED\",\n    CREATE_COMPANY_SUCCESS = \"CREATE_COMPANY_SUCCESS\",\n\n    DELETE_COMPANY = \"DELETE_COMPANY\",\n    DELETE_COMPANY_FAILED = \"DELETE_COMPANY_FAILED\",\n    DELETE_COMPANY_SUCCESS = \"DELETE_COMPANY_SUCCESS\"\n}","import { Dispatch } from 'redux';\nimport { Action, fetchRole, fetchRoleFailed, fetchRoleSuccess } from '../actions/roleActions';\nimport axios from 'axios';\nimport { GET_ROLES } from '../../constants/Api';\nimport { ThunkAction } from 'redux-thunk';\nimport { RootState } from '../reducers';\n\nexport type AppThunk<R> = ThunkAction<R, RootState, null, Action>;\n\nexport const fetchRoles = (): AppThunk<void> => {\n    return async (dispatch: Dispatch<Action>) => {\n        dispatch(fetchRole());\n        return await axios.get(GET_ROLES, {})\n            .then(response => {\n                dispatch(fetchRoleSuccess(response.data.data.role));\n            }).catch(error => {\n                dispatch(fetchRoleFailed(error.message));\n            });\n    }\n}\n","import { CompanyActionTypes } from '../action-types/companyActionTypes';\n\n// Get Company\n\ninterface GetCompanyAction {\n    type: CompanyActionTypes.GET_COMPANY,\n}\n\ninterface GetCompanyFailed {\n    type: CompanyActionTypes.GET_COMPANY_FAILED,\n    payload: string\n}\n\ninterface GetCompanySuccess {\n    type: CompanyActionTypes.GET_COMPANY_SUCCESS,\n    payload: []\n}\n\n\nexport const getCompany = (): GetCompanyAction => {\n    return {\n        type: CompanyActionTypes.GET_COMPANY\n    }\n}\n\nexport const getCompanyFailed = (message: string): GetCompanyFailed => {\n    return {\n        type: CompanyActionTypes.GET_COMPANY_FAILED,\n        payload: message\n    }\n}\n\nexport const getCompanySuccess = (Company: []): GetCompanySuccess => {\n    return {\n        type: CompanyActionTypes.GET_COMPANY_SUCCESS,\n        payload: Company\n    }\n}\n\n// Create Company\n\ninterface CreateCompanyAction {\n    type: CompanyActionTypes.CREATE_COMPANY,\n}\n\ninterface CreateCompanyFailed {\n    type: CompanyActionTypes.CREATE_COMPANY_FAILED,\n    payload: string\n}\n\ninterface CreateCompanySuccess {\n    type: CompanyActionTypes.CREATE_COMPANY_SUCCESS,\n}\n\nexport const createCompanyAction = (): CreateCompanyAction => {\n    return {\n        type: CompanyActionTypes.CREATE_COMPANY\n    }\n}\n\nexport const createCompanyFailedAction = (message: string): CreateCompanyFailed => {\n    return {\n        type: CompanyActionTypes.CREATE_COMPANY_FAILED,\n        payload: message\n    }\n}\n\nexport const createCompanySuccessAction = (): CreateCompanySuccess => {\n    return {\n        type: CompanyActionTypes.CREATE_COMPANY_SUCCESS\n    }\n}\n\n// Delete Company\n\ninterface DeleteCompanyAction {\n    type: CompanyActionTypes.DELETE_COMPANY,\n}\n\ninterface DeleteCompanyFailed {\n    type: CompanyActionTypes.DELETE_COMPANY_FAILED,\n    payload: string\n}\n\ninterface DeleteCompanySuccess {\n    type: CompanyActionTypes.DELETE_COMPANY_SUCCESS,\n}\n\nexport const deleteCompanyAction = (): DeleteCompanyAction => {\n    return {\n        type: CompanyActionTypes.DELETE_COMPANY\n    }\n}\n\nexport const deleteCompanyFailedAction = (message: string): DeleteCompanyFailed => {\n    return {\n        type: CompanyActionTypes.DELETE_COMPANY_FAILED,\n        payload: message\n    }\n}\n\nexport const deleteCompanySuccessAction = (): DeleteCompanySuccess => {\n    return {\n        type: CompanyActionTypes.DELETE_COMPANY_SUCCESS\n    }\n}\n\nexport type Action = DeleteCompanyAction | DeleteCompanySuccess | DeleteCompanyFailed | GetCompanyAction | GetCompanyFailed | GetCompanySuccess | CreateCompanyAction | CreateCompanyFailed | CreateCompanySuccess;","export enum BookingsActionTypes {\n    ALL_BOOKINGS = \"ALL_BOOKINGS\",\n    BOOKINGS_FAILED = \"BOOKINGS_FAILED\"\n}","import { Dispatch } from 'redux';\nimport {\n    Action,\n    getCompany, getCompanyFailed, getCompanySuccess,\n    createCompanySuccessAction, createCompanyFailedAction, createCompanyAction, deleteCompanySuccessAction, deleteCompanyFailedAction\n} from '../actions/companyActions';\nimport axios from 'axios';\nimport { GET_COMPANY, CREATE_COMPANY, DELETE_COMPANY } from '../../constants/Api';\nimport { ThunkAction } from 'redux-thunk';\nimport { RootState } from '../reducers';\n\nexport type AppThunk<R> = ThunkAction<R, RootState, null, Action>;\n\nexport const fetchCompany = (): AppThunk<void> => {\n    return async (dispatch: Dispatch<Action>) => {\n        dispatch(getCompany());\n        return await axios.post(GET_COMPANY, {})\n            .then(response => {\n                dispatch(getCompanySuccess(response.data.data));\n            }).catch(error => {\n                dispatch(getCompanyFailed(error.message));\n            });\n    }\n}\n\nexport const createCompany = (name: string, address: string, phone: number): AppThunk<void> => {\n    return async (dispatch: Dispatch<Action>) => {\n        dispatch(createCompanyAction());\n        return await axios.post(CREATE_COMPANY, { name, address, 'number': phone })\n            .then(response => {\n                dispatch(createCompanySuccessAction());\n            }).catch(error => {\n                dispatch(createCompanyFailedAction(error.message));\n            });\n    }\n}\n\nexport const deleteCompany = (_id: number): AppThunk<void> => {\n    return async (dispatch: Dispatch<Action>) => {\n        dispatch(createCompanyAction());\n        return await axios.delete(DELETE_COMPANY + _id, {})\n            .then(response => {\n                dispatch(deleteCompanySuccessAction());\n            }).catch(error => {\n                dispatch(deleteCompanyFailedAction(error.message));\n            });\n    }\n}\n","import { BookingsActionTypes } from '../action-types/bookingsActionTypes'\n\ninterface BookingsAction {\n    type: BookingsActionTypes.ALL_BOOKINGS\n    payload: string\n}\n\ninterface BookingsFailed {\n    type: BookingsActionTypes.BOOKINGS_FAILED,\n    payload: string\n}\n\nexport const bookingsSuccess = (data: any): BookingsAction => {\n    return {\n        type: BookingsActionTypes.ALL_BOOKINGS,\n        payload: data\n    }\n}\n\nexport const bookingsFailed = (message: string): BookingsFailed => {\n    return {\n        type: BookingsActionTypes.BOOKINGS_FAILED,\n        payload: message\n    }\n}\n\nexport type Action = BookingsAction | BookingsFailed;\n","import { Dispatch } from 'redux';\nimport { Action, bookingsSuccess, bookingsFailed } from '../actions/bookingsAction';\nimport axios from 'axios';\nimport { BOOKINGS } from '../../constants/Api';\nimport { ThunkAction } from 'redux-thunk';\nimport { RootState } from '../reducers';\n\nexport type AppThunk<R> = ThunkAction<R, RootState, null, Action>;\n\nexport const getBookings = (): AppThunk<void> => {\n    return async (dispatch: Dispatch<Action>) => {\n        return await axios.post(BOOKINGS, {\n            \"skip\": 0\n        })\n            .then(response => {\n                const { data: { data = [] } = {} } = response || {};\n                dispatch(bookingsSuccess(data));\n            }).catch(error => {\n                dispatch(bookingsFailed(error.message));\n            });\n    }\n}\n","import * as Yup from \"yup\";\n\nexport const signInValidationSchema = Yup.object().shape({\n  email: Yup\n    .string()\n    .email('Enter a valid email')\n    .required('Email is required'),\n  password: Yup\n    .string()\n    .min(8, 'Password should be of minimum 8 characters length')\n    .required('Password is required'),\n});","import React from \"react\";\nimport { useFormik } from \"formik\";\nimport { signInValidationSchema } from \"./SignInFormValidation\";\nimport { TextField, Button } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\n\nexport interface SignInFormFields {\n    email:string;\n    password: string;\n}\ninterface SignInFormProps{\n    handleSubmit: (data:any)=>void;\n};\n\nexport default function SignInForm(props:SignInFormProps) {\n  const initialValues:SignInFormFields = {email: '', password: ''};\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: signInValidationSchema,\n    onSubmit: props.handleSubmit,\n  });\n\n  return (\n    <Box component=\"form\"  onSubmit={formik.handleSubmit}>\n        <TextField margin=\"normal\" required fullWidth id=\"email\" label=\"Email Address\"\n            name=\"email\" autoComplete=\"email\" autoFocus \n            value={formik.values.email}\n            onChange={formik.handleChange}\n            error={formik.touched.email && Boolean(formik.errors.email)}\n            helperText={formik.touched.email && formik.errors.email}/>\n        <TextField margin=\"normal\" required fullWidth name=\"password\" label=\"Password\"\n            type=\"password\" id=\"password\" autoComplete=\"off\" \n            value={formik.values.password}\n            onChange={formik.handleChange}\n            error={formik.touched.password && Boolean(formik.errors.password)}\n            helperText={formik.touched.password && formik.errors.password}/>\n        <Button type=\"submit\" fullWidth variant=\"contained\" sx={{ mt: 3, mb: 2 }} >\n            Sign In\n        </Button>\n    </Box>\n  );\n}","import { Container, CssBaseline, Avatar, Typography, TextField, Button } from '@mui/material';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport { Box } from '@mui/system';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { bindActionCreators } from 'redux';\nimport { loginActionCreators } from '../../store/action-creators';\nimport './sign-in.scss';\nimport SignInForm, { SignInFormFields } from './sign-in-form/SignInForm';\nimport { RootState } from '../../store/reducers';\nimport { useEffect } from 'react';\n\nexport default function SignInView() {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const { loginUser } = bindActionCreators(loginActionCreators, dispatch)\n    const {status} = useSelector((state:RootState )=> state.login);\n\n    useEffect(() => {\n        if(status=='success'){\n            history.push(\"/home\");\n        }\n    }, [status]);\n\n    const handleSubmit = (data: SignInFormFields) => {\n        const {email, password} = data;\n        if(email && password){\n            loginUser(email, password);\n        }\n    };\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <Box className=\"main-container\">\n                <Avatar sx={{ m: 3, bgcolor: 'primary.main' }}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h3\">\n                    Sign in\n                </Typography>\n                <SignInForm handleSubmit={handleSubmit}/>\n                {status=='failed' && <Typography variant='error'> Failed to login. Please check Username and Password</Typography>}\n            </Box>\n        </Container>\n    )\n}\n","import SignInView from '../../components/signin-view/SignInView';\n\nexport default function SignIn() {\n  return (\n      <SignInView></SignInView>\n  );\n}","import { ListItem, ListItemText, Badge, Typography } from \"@mui/material\";\nimport { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport interface DrawerItem{\n    text: string;\n    id: string;\n    notifications?: number;\n    subMenu?: DrawerItem[];\n}\n\nconst DrawerMenuItem: React.FC<DrawerItem> = (item:DrawerItem): React.ReactElement =>{\n    const history = useHistory();\n    const [activeMenu, setActiveMenu] = useState('');\n  \n    useEffect(() => {\n      return history.listen((location) => {\n        setActiveMenu(location.pathname);\n      })\n    },[history])\n  \n    useEffect(() => {\n      setActiveMenu(history.location.pathname);\n    },[])\n  \n    return (\n      <ListItem button key={item.text}  selected={activeMenu.indexOf(item.id)>-1} onClick={()=>history.push(item.id)}>\n        <ListItemText className=\"menu-item-text\">\n          <Typography variant=\"body1\">\n            {item.text}\n            {item.notifications && <Badge badgeContent={item.notifications} color=\"primary\" style={{left: '2rem'}}></Badge>}\n          </Typography>\n        </ListItemText>\n      </ListItem>\n    );\n  }\n\n  export default DrawerMenuItem;","import { ExpandLess, ExpandMore } from \"@mui/icons-material\";\nimport { ListItem, ListItemText, Collapse, List, ListItemIcon, Typography } from \"@mui/material\";\nimport clsx from \"clsx\";\nimport { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { DrawerItem } from \"./DrawerMenuItem\";\n\n\nconst DrawerSubMenuItem: React.FC<DrawerItem> = (item:DrawerItem): React.ReactElement =>{\n    const history = useHistory();\n    const [openMenu, setOpenMenu] = useState(true);\n    const [activeSubMenu, setActiveSubMenu] = useState('');\n    const [activeMenu, setActiveMenu] = useState('');\n    \n    const menuClicked = (subItem: DrawerItem)=>{\n      history.push(subItem.id);\n    }\n  \n    useEffect(() => {\n      return history.listen((location) => {\n        setActiveSubMenu(location.pathname);\n        setActiveMenu(location.pathname);\n      })\n    },[history])\n    \n    useEffect(() => {\n      const location = history.location;\n      if(!activeMenu){\n        setActiveSubMenu(location.pathname);\n        setActiveMenu(location.pathname);\n      }\n    },[])\n  \n    return (\n      <>\n        <ListItem button key={item.text} selected={activeMenu.indexOf(item.id)>-1}onClick={()=>setOpenMenu(!openMenu)}>\n          <ListItemText style={{marginLeft: '2rem'}}> \n            <span>{item.text}</span>\n          </ListItemText>\n          {openMenu ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse\n            key={item.text + '-collapsable'}\n            in={openMenu}\n            timeout=\"auto\"\n            unmountOnExit\n          >\n          {(item.subMenu || []).map((subItem)=>\n            <List component='li' disablePadding key={subItem.text}>\n              <ListItem button key={subItem.text} onClick={()=>menuClicked(subItem)} sx={{padding:0}}>\n                <ListItemIcon>\n                  {/* */}\n                </ListItemIcon>\n                <ListItemText className={clsx(\"submenu-item\", {[\"active\"]: activeSubMenu==subItem.id})} key={subItem.id} sx={{margin:0}}>\n                  <Typography variant=\"body1\">{subItem.text}</Typography>\n                </ListItemText>\n              </ListItem>\n            </List>\n          )}\n        </Collapse>\n      </>\n    )\n   }\n\n   export default DrawerSubMenuItem;","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport '../g-drawer.scss'\nimport DrawerMenuItem, { DrawerItem } from './DrawerMenuItem';\nimport DrawerSubMenuItem from './DrawerMenuSubItem';\nimport { List } from '@mui/material';\n\ninterface DrawerItemProps{\n  items: DrawerItem[];\n}\n\nconst DrawerLayout: React.FC<DrawerItemProps> = (props:DrawerItemProps): React.ReactElement =>{\n  return (\n    <>\n      <Toolbar />\n      <Box sx={{ overflow: 'auto' }}>\n        <List>\n          {(props.items || []).map((item:DrawerItem, index) => {\n            if(item.subMenu){\n               return <DrawerSubMenuItem text={item.text} id={item.id} subMenu={item.subMenu}/>\n            }else{\n              return <DrawerMenuItem text={item.text} id={item.id} notifications={item.notifications}/>\n            }\n        })}\n        </List>\n      </Box>\n    </>);\n}\n\nexport default DrawerLayout;","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\nimport './g-drawer.scss'\nimport DrawerLayout from './drawer-components/DrawerLayout';\nimport { DrawerItem } from './drawer-components/DrawerMenuItem';\n\nconst drawerWidth = 300;\n\ninterface Props {\n  window?: () => Window;\n  children: React.ReactNode;\n  mobileOpen: boolean;\n  items: DrawerItem[];\n  handleDrawerToggle: ()=>void;\n}\n\nexport default function GroundUpDrawer(props: Props) {\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <Drawer\n        variant=\"temporary\"\n        open={props.mobileOpen}\n        onClose={props.handleDrawerToggle}\n        ModalProps={{\n          keepMounted: true, \n        }}\n        sx={{\n          display: { xs: 'block', sm: 'none' },\n          width: drawerWidth,\n          flexShrink: 0,\n          [`& .MuiDrawer-paper`]: { width: drawerWidth, boxSizing: 'border-box' },\n        }}\n      >\n        <DrawerLayout items={props.items}/>\n      </Drawer>\n      <Drawer\n        className=\"drawer-panel\"\n        variant=\"permanent\"\n        sx={{\n          display: { xs: 'none', sm: 'block' },\n          width: drawerWidth,\n          [`& .MuiDrawer-paper`]: { width: drawerWidth }\n        }}\n      >\n        <DrawerLayout items={props.items}/>\n      </Drawer>\n      <Box \n        component=\"main\"\n        className=\"main-component\"\n        sx={{\n          width: { sm: `calc(100% - ${drawerWidth}px)` },\n          marginTop: {xs: '50px', md: '64px'}}}\n        >\n        <Box sx={{ flex: '1 1 auto'}}>\n          {props.children}\n        </Box>\n      </Box>\n      \n    </Box>\n  );\n}","\nexport const ROOT = \"/\";\nexport const HOME = \"/home\";\nexport const USER = \"/user\";\nexport const BOOKING = \"/booking\";\nexport const GRANTT_CHART = \"/chart\";\nexport const ADMIN = \"/admin\";\nexport const REVIEW = \"/review\";\nexport const NOTIFICATION = \"/notification\";\nexport const USER_MANAGEMENT = \"/user-management\";\nexport const ROLE_MANAGEMENT = \"/role-management\";\nexport const MATERIAL_MANAGEMENT = \"/material-management\";\nexport const ACTIVITY_MANAGEMENT = \"/activity-management\";\nexport const MAINTENANCE_MANAGEMENT = \"/maintenance-management\";\nexport const CRANE_BOOKING_MANAGEMENT = \"/crane-booking-management\";\nexport const REPORTS_MANAGEMENT = \"/reports-management\";\nexport const COMPANY_MANAGEMENT = \"/company-management\";\nexport const FROM_GRANTT_CHART = \"?from=chart\";\n\nexport const HOME_BOOKING = HOME + BOOKING;\nexport const HOME_BOOKING_REVIEW = HOME + BOOKING + REVIEW;\nexport const HOME_GRANTT_CHART = HOME + GRANTT_CHART;\nexport const HOME_BOOKING_FROM_GRANTT_CHART = HOME + BOOKING + FROM_GRANTT_CHART;\nexport const USER_ADMIN = USER + ADMIN;\nexport const USER_NOTIFICATION = USER + NOTIFICATION;\nexport const USER_ADMIN_USER_MANAGEMENT = USER_ADMIN + USER_MANAGEMENT;\nexport const USER_ADMIN_ROLE_MANAGEMENT = USER_ADMIN + ROLE_MANAGEMENT;\nexport const USER_ADMIN_MATERIAL_MANAGEMENT = USER_ADMIN + MATERIAL_MANAGEMENT;\nexport const USER_ADMIN_ACTIVITY_MANAGEMENT = USER_ADMIN + ACTIVITY_MANAGEMENT;\nexport const USER_ADMIN_MAINTENANCE_MANAGEMENT = USER_ADMIN + MAINTENANCE_MANAGEMENT;\nexport const USER_ADMIN_CRANE_BOOKING_MANAGEMENT = USER_ADMIN + CRANE_BOOKING_MANAGEMENT;\nexport const USER_ADMIN_REPORTS_MANAGEMENT = USER_ADMIN + REPORTS_MANAGEMENT;\nexport const USER_ADMIN_COMPANY_MANAGEMENT = USER_ADMIN + COMPANY_MANAGEMENT;\n\n\n","import * as React from 'react';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport CasesOutlinedIcon from '@mui/icons-material/CasesOutlined';\nimport SettingsApplicationsOutlinedIcon from '@mui/icons-material/SettingsApplicationsOutlined';\nimport AssessmentOutlinedIcon from '@mui/icons-material/AssessmentOutlined';\nimport { HOME_BOOKING } from '../../../constants/ContextPaths';\nimport { useHistory } from 'react-router';\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index?: number;\n    setIndex: (index:number)=>void;\n}\n\nfunction a11yProps(index: number) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nexport default function GroundUpTabs(props:TabPanelProps) {\n\n  const tabs = [\n    {text: \"Booking\", id:HOME_BOOKING, icon:<CasesOutlinedIcon />},\n    {text: \"Maintenance\", id:'/home/maintenance', icon:<SettingsApplicationsOutlinedIcon />},\n    {text: \"Report\", id:'/home/report', icon:<AssessmentOutlinedIcon />},\n  ];\n\n  const history = useHistory();\n\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    props.setIndex(newValue);\n    history.push(tabs[newValue].id);\n  };\n\n  return (\n    <>\n      <Tabs value={props.index} onChange={handleChange} aria-label=\"GroundUp Tabs\" sx={{display: {xs:'none', sm:'block'}}}>\n          {(tabs || []).map((item, index)=><Tab key={item.id} label={item.text} {...a11yProps(index)} />)}\n      </Tabs>\n      <Tabs value={props.index} onChange={handleChange} aria-label=\"GroundUp Tabs\" sx={{display: {xs:'block', sm:'none'}}}>\n        {(tabs || []).map((item, index)=><Tab key={item.id} icon={item.icon} aria-label={item.text}/>)}\n      </Tabs>\n    </>\n  );\n}\n","import { Box } from \"@mui/system\";\nimport React, { FC } from \"react\";\nimport \"./notificationitem.scss\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Typography } from \"@mui/material\";\n\ninterface NotificationItemProps {\n  category: string;\n  time: string;\n  message: string;\n  index: number,\n  removeNotification: React.Dispatch<React.SetStateAction<Array<string>>>\n  notifications: string[],\n};\n\nfunction NotificationItem({ category, time, message, index, removeNotification, notifications }: NotificationItemProps) {\n\n  return (\n    <React.Fragment>\n        <Box className=\"notification-item\">\n          <div className=\"notification-drawer-category\">\n            <Typography className=\"notification-drawer-category heading\" variant=\"caption\" >{category}</Typography>\n            <div className=\"notification-close-icon\">\n              <CloseIcon onClick={() => {\n                removeNotification(notifications.filter((_, i) => i !== index))\n              }} fontSize=\"small\" />\n            </div>\n          </div>\n          <Typography className=\"heading\" variant=\"subtitle2\" >{message}</Typography>\n          <Typography className=\"heading\" variant=\"caption\" component=\"h2\" >{time}</Typography>\n        </Box>\n    </React.Fragment>\n  );\n}\n\nexport default NotificationItem;\n","import React, { useState, Dispatch } from 'react'\nimport Box from \"@mui/material/Box\";\nimport Drawer from \"@mui/material/Drawer\";\nimport List from \"@mui/material/List\";\nimport NotificationItem from \"./NotificationItem/NotificationItem\";\nimport { Toolbar, Typography } from \"@mui/material\";\nimport './notificationdrawer.scss'\n\ninterface NotificationsProps {\n  notifications: string[],\n  removeNotification: React.Dispatch<React.SetStateAction<Array<string>>>\n}\n\ninterface NotificationDrawerProps {\n  openNotificationDrawer: boolean ;\n  setopenNotificationDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst NotificationItems: React.FC<NotificationsProps> = ({ notifications, removeNotification }) => (\n  <Box role=\"presentation\"  >\n    <List style={{ width: \"21.25rem\" }}>\n      {notifications.length != 0 ? notifications.map((text, index) => (\n        <NotificationItem key={index} removeNotification={removeNotification}\n          notifications={notifications}\n          index={index} category={text} message=\"Idling detected at Crane A, Zone A\" time=\"1 Hr ago\" />\n      ))\n        :\n        <Box className=\"no-notification-box\"  >\n          <Typography m={5} className=\"heading\" variant=\"h5\" component=\"h2\">No notifications</Typography>\n          <img className=\"notification-no-img\" alt=\"no-notification\" src=\"/assets/svg/notebook.svg\" />\n        </Box>\n      }\n    </List >\n  </Box >\n);\n\nexport default function NotificationDrawer(props: NotificationDrawerProps) {\n  const [notifications, removeNotification] = useState<NotificationsProps[\"notifications\"]>([\"Alert\", \"Bookings\", \"Alert\", \"Bookings\"])\n  return (\n    <React.Fragment>\n      <Drawer anchor=\"right\" open={props.openNotificationDrawer} onClose={() => { props.setopenNotificationDrawer(!props.openNotificationDrawer) }}>\n        <Toolbar />\n        <NotificationItems notifications={notifications} removeNotification={removeNotification} />\n      </Drawer>\n    </React.Fragment>\n  );\n}","import * as React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Badge from '@mui/material/Badge';\nimport MenuItem from '@mui/material/MenuItem';\nimport Menu from '@mui/material/Menu';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport NotificationsNoneIcon from '@mui/icons-material/NotificationsNone';\nimport SettingsOutlinedIcon from '@mui/icons-material/SettingsOutlined';\nimport MoreIcon from '@mui/icons-material/MoreVert';\nimport GroundUpTabs from '../ground-up-tabs/GroundUpTabs';\nimport { Button } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../store/reducers';\nimport { useHistory } from 'react-router';\nimport { USER_ADMIN, USER_ADMIN_USER_MANAGEMENT, USER_NOTIFICATION } from '../../../constants/ContextPaths';\nimport clsx from 'clsx';\nimport NotificationDrawer from \"../notification-drawer/NotificationDrawer\";\n\ninterface HeadersProps {\n  handleDrawerToggle: ()=>void;\n  headerTab: number;\n  setHeaderTab: (index:number)=>void;\n  }\n\nexport default function GroundUpAppBar(props: HeadersProps) {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const isMenuOpen = Boolean(anchorEl);\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n  const [openNotificationDrawer, setopenNotificationDrawer] = React.useState<boolean>(false);\n  const history = useHistory();\n\n  const {username} = useSelector((state: RootState) => state.login);\n\n\n  const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMobileMenuClose = () => {\n    setMobileMoreAnchorEl(null);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n    handleMobileMenuClose();\n  };\n\n  const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n    setMobileMoreAnchorEl(event.currentTarget);\n  };\n\n  const toggleNotificationDrawer = () => {\n    setopenNotificationDrawer(!openNotificationDrawer);\n  };\n  const menuId = 'primary-search-account-menu';\n  const renderMenu = (\n    <Menu\n      anchorEl={anchorEl}\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'right',\n      }}\n      id={menuId}\n      keepMounted\n      transformOrigin={{\n        vertical: 'top',\n        horizontal: 'right',\n      }}\n      open={isMenuOpen}\n      onClose={handleMenuClose}\n    >\n      <NotificationDrawer\n        openNotificationDrawer={openNotificationDrawer}\n        setopenNotificationDrawer={setopenNotificationDrawer}\n      />\n      <MenuItem onClick={handleMenuClose}>Logout</MenuItem>\n    </Menu>\n  );\n\n  const mobileMenuId = 'primary-search-account-menu-mobile';\n  const renderMobileMenu = (\n    <Menu\n      anchorEl={mobileMoreAnchorEl}\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'right',\n      }}\n      id={mobileMenuId}\n      keepMounted\n      transformOrigin={{\n        vertical: 'top',\n        horizontal: 'right',\n      }}\n      open={isMobileMenuOpen}\n      onClose={handleMobileMenuClose}\n    >\n      <MenuItem>\n        <IconButton\n          size=\"large\"\n          aria-label=\"show notifications\"\n          color=\"inherit\"\n          onClick={()=>history.push(USER_NOTIFICATION)}\n        >\n          <SettingsOutlinedIcon />\n        </IconButton>\n        <p>Settings</p>\n      </MenuItem>\n      <MenuItem>\n        <IconButton\n          size=\"large\"\n          aria-label=\"show new notifications\"\n          color=\"inherit\"\n        >\n          <Badge badgeContent={4} color=\"primary\">\n            <NotificationsNoneIcon />\n          </Badge>\n        </IconButton>\n        <p>Notifications</p>\n      </MenuItem>\n      <MenuItem onClick={handleProfileMenuOpen}>\n        <IconButton\n          size=\"large\"\n          aria-label=\"account of current user\"\n          aria-controls=\"primary-search-account-menu\"\n          aria-haspopup=\"true\"\n          color=\"inherit\"\n        >\n          <AccountCircle />\n        </IconButton>\n        <Typography style={{textTransform: 'capitalize'}}>Welcome {username}!</Typography>\n      </MenuItem>\n    </Menu>\n  );\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"fixed\" sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}>\n        <Toolbar>\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={props.handleDrawerToggle}\n            sx={{ display: { xs: 'block', sm: 'none' },mr: 2 }}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Box component=\"img\"\n            sx={{\n              height: 233,\n              width: 350,\n              marginRight:5,\n              maxHeight: { xs: 22, md: 22 },\n              maxWidth: { xs: 150, md: 150 },\n            }}\n            alt=\"GROUNDUP.AI\"\n            src=\"/assets/images/logoE6.png\"/>\n          <GroundUpTabs index={props.headerTab} setIndex={props.setHeaderTab}/>\n          <Box sx={{ flexGrow: 1 }} />\n          <Box sx={{ display: { xs: 'none', md: 'flex' }, alignItems: 'center' }}>\n            <IconButton\n              size=\"large\"\n              aria-label=\"show Settings\"\n              color=\"inherit\"\n              onClick={()=>history.push(USER_ADMIN_USER_MANAGEMENT)}\n            >\n              <SettingsOutlinedIcon />\n            </IconButton>\n            <IconButton\n              size=\"large\"\n              aria-label=\"show notifications\"\n              color=\"inherit\"\n              onClick={()=>toggleNotificationDrawer()}\n            >\n              <Badge badgeContent={17} color=\"primary\">\n                <NotificationsNoneIcon />\n              </Badge>\n            </IconButton>\n            <div style={{height: '28px', border: '1px solid rgba(0, 0, 0, 0.5)', margin:'0 .5rem 0 .7rem'}}></div>\n            <Typography onClick={handleProfileMenuOpen} style={{textTransform: 'capitalize'}}>Welcome {username}!</Typography>\n          </Box>\n          <Box sx={{ display: { xs: 'flex', md: 'none' } }}>\n            <IconButton\n              size=\"large\"\n              aria-label=\"show more\"\n              aria-controls={mobileMenuId}\n              aria-haspopup=\"true\"\n              onClick={handleMobileMenuOpen}\n              color=\"inherit\"\n            >\n              <MoreIcon />\n            </IconButton>\n          </Box>\n        </Toolbar>\n      </AppBar>\n      {renderMobileMenu}\n      {renderMenu}\n    </Box>\n  );\n}","import { Paper, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, TablePagination, Box, Typography, useTheme } from '@mui/material';\nimport { EditOutlined, DeleteOutlined } from '@mui/icons-material';\nimport React from 'react';\nimport { grey } from '@mui/material/colors';\nimport './g-table.scss'\n\ninterface GTableProps {\n    rowClicked?: (data: any) => void;\n    deleteClicked?: (data: any) => void;\n    editlicked?: (data: any) => void;\n    rows: Array<any>,\n    columns: Array<any>,\n}\n\nexport default function GTable(props: GTableProps) {\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n    const { rows = [], columns = [] } = props;\n    const theme = useTheme();\n\n    const handleChangePage = (event: unknown, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    return (\n        <Paper sx={{ border: `1px solid ${theme.palette.secondary.main}` }} className=\"table-paper\">\n            <TableContainer sx={{ maxHeight: 440 }}>\n                <Table stickyHeader aria-label=\"sticky table\" size=\"small\" sx={{ padding: '1rem', paddingTop: '0.5rem' }}>\n                    <TableHead>\n                        <TableRow>\n                            {columns.map((column) => (\n                                <TableCell\n                                    key={column.id}\n                                    align={column.align}\n                                    style={{ minWidth: column.minWidth || 100 }}\n                                    sx={{ borderBottom: `2.5px solid ${grey[300]}` }}\n                                >\n                                    <Typography variant=\"subtitle2\">\n                                        {column.label}\n                                    </Typography>\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((row) => {\n                                return (\n                                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} onClick={() => props.rowClicked && props.rowClicked(row)}>\n                                        {columns.map((column) => {\n                                            const value = row[column.id];\n                                            return (\n                                                <TableCell key={column.id} align={column.align}  >\n                                                    {column.format && typeof value === 'number'\n                                                        ? column.format(value)\n                                                        : column.id === 'image' ? <img src={value} style={{ height: '3rem', width: '3.5rem' }} />\n                                                            : column.id === 'action' ? <Box> <EditOutlined sx={{ color: 'gray' }} onClick={() => props.editlicked && props.editlicked(row)} />\n                                                                <DeleteOutlined sx={{ color: 'red' }} onClick={() => props.deleteClicked && props.deleteClicked(row['_id']) } />  </Box>\n                                                                : <Typography variant=\"subtitle2\"> {value} </Typography>}\n                                                </TableCell>\n                                            );\n                                        })}\n                                    </TableRow>\n                                );\n                            })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            {\n                rows.length >= 10 &&\n                <TablePagination\n                    rowsPerPageOptions={[10, 25, 100]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onPageChange={handleChangePage}\n                    onRowsPerPageChange={handleChangeRowsPerPage}\n                />\n            }\n        </Paper>\n    )\n}\n","import DatePicker from 'react-datepicker';\nimport { FormikValues, FormikProps } from 'formik';\nimport { Box, Input, InputLabel, Typography } from '@mui/material';\nimport EventIcon from '@mui/icons-material/Event';\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport './g-date-picker.scss';\nimport { useRef } from 'react';\nimport { relative } from 'path';\n\ninterface GDatePickerProps{\n    label?:string;\n    date: Date | null;\n    dateDelete?: boolean;\n    onChange:(date:Date | null)=>void\n}\n\ninterface GFormDatePickerProps<T extends FormikValues>{\n    formik: FormikProps<T>;\n    id:string;\n    label?:string\n    dateDelete?: boolean;\n    timeonly?:boolean;\n}\n\n \nexport default function GFormDatePicker<T extends FormikValues>({formik, id, label, dateDelete, timeonly}:GFormDatePickerProps<T>){\n    const {setFieldValue} = formik;\n\n    const timeProps:any ={};\n    if(timeonly){\n        timeProps['showTimeSelect']=true\n        timeProps['showTimeSelectOnly']=true\n        timeProps['timeIntervals']=5\n        timeProps['timeCaption']=\"Time\"\n        timeProps['dateFormat']=\"h:mm aa\"\n    }\n\n    const datepickerRef = useRef<DatePicker>(null);\n    const handleClickDatepickerIcon =() => {\n        const datepickerElement = datepickerRef.current;\n        datepickerElement?.setFocus();\n    }\n\n    return (\n        <Box className=\"g-date-picker\">\n            <InputLabel id={id}>{label}</InputLabel>\n            <Box sx={{position:\"relative\"}}>\n                <DatePicker\n                    {...timeProps}\n                    selected={formik.values[id]}\n                    ref={datepickerRef}\n                    onChange={(value)=>{\n                        setFieldValue(id, value, true);\n                    }}\n                />\n                {timeonly && (!formik.values[id] || !(formik.values[id] && dateDelete)) && <AccessTimeIcon className=\"form-date-icon\" onClick={() => handleClickDatepickerIcon()}/>}\n                {!timeonly && (!formik.values[id] || !(formik.values[id] && dateDelete)) && <EventIcon className=\"form-date-icon\" onClick={() => handleClickDatepickerIcon()}/>}\n                {formik.values[id] && dateDelete && <HighlightOffIcon className=\"form-date-icon\" onClick={() => setFieldValue(id, null, true)}/>}\n            </Box>\n            {formik.errors[id] && \n                <Typography variant=\"error\" component=\"div\">\n                    {formik.errors[id]}\n                </Typography>\n            }\n        </Box>\n    )\n}\n\nexport function GDatePicker({label, date, dateDelete=false, onChange}:GDatePickerProps){\n    const datepickerRef = useRef<DatePicker>(null);\n    const handleClickDatepickerIcon =() => {\n        const datepickerElement = datepickerRef.current;\n        datepickerElement?.setFocus();\n    }\n    const cleanDate = ()=>{\n        onChange(null);\n    }\n   \n    return (\n        <Box className=\"g-date-picker\">\n            <InputLabel >{label}</InputLabel>\n            <Box sx={{position:\"relative\"}}>\n                <DatePicker\n                    selected={date}\n                    onChange={onChange}\n                    ref={datepickerRef}\n                    placeholderText=\"Select Date\"\n                />\n            </Box>\n            {(!date || !(date && dateDelete)) && <EventIcon className=\"date-icon\" onClick={() => handleClickDatepickerIcon()}/>}\n            {date && dateDelete && <HighlightOffIcon className=\"date-icon\" onClick={() => cleanDate()}/>}\n        </Box>\n    )\n}","import { MenuItem, InputLabel, TextField, Typography } from '@mui/material'\nimport { FormikProps, FormikValues } from 'formik';\nimport './g-select.scss'\n\nexport interface GSelectOption{\n    key:string;\n    value:string;\n}\n\ninterface GFormSelectProps<T extends FormikValues>{\n    formik: FormikProps<T>;\n    id:string;\n    label?:string;\n    options: GSelectOption[];\n}\n\ninterface GSelectProps{\n    id:string;\n    label?:string;\n    placeholder?:string;\n    value?:string;\n    options: GSelectOption[];\n    onChange:(value:string)=>void;\n}\n\nexport function GFormSelect<T extends FormikValues>({formik, id, label, options}:GFormSelectProps<T>) {\n    const {setFieldValue} = formik;\n    return (\n        <div className=\"custom-select\">\n            <InputLabel id=\"custom-input-label\">{label}</InputLabel>\n            <TextField\n                select\n                value={formik.values[id]}\n                onChange={(e)=>{\n                    setFieldValue(id, e.target.value, true);\n                }}\n                error={formik.touched[id] && Boolean(formik.errors[id])}\n                inputProps={{ 'aria-label': 'Without label' }}\n                >\n                <MenuItem key=\"\" value=\"\">\n                    <em>None</em>\n                </MenuItem>\n                {(options || []).map(item=><MenuItem key={item.key} value={item.key}>{item.value}</MenuItem>)}\n            </TextField>\n            {formik.touched[id] && formik.errors[id] && \n                <Typography variant=\"error\" component=\"div\">\n                    {formik.errors[id]}\n                </Typography>\n            }\n      </div>\n    )\n}\n\nexport default function GSelect({id, placeholder, label, value, options, onChange}:GSelectProps){\n    return (\n        <div className=\"custom-select\">\n            {label && <InputLabel id=\"custom-input-label\">{label}</InputLabel>}\n            {!value && <>\n                <button className=\"btn btn-secondary dropdown-toggle dropdown-button\" type=\"button\" id={`Select ${label?label:''}`} data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                    {placeholder}\n                </button>\n                <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton1\">\n                    {(options || []).map(item=><li><a className=\"dropdown-item\" href=\"#\" onClick={(e)=>onChange(item.key)}>{item.value}</a></li>)}\n                </ul>\n            </>}\n            {value && <TextField\n                select\n                value={value}\n                onChange={(e)=>onChange(e.target.value)}\n                id={`Select ${label?label:''}`}\n                name={`Select ${label?label:''}`}\n                inputProps={{ 'aria-label': \"Select\"}}\n                SelectProps={{ \n                    MenuProps:{\n                        classes: {list: \"dropdown-menu show\"}\n                    }\n                }}\n                \n                >\n                <MenuItem key=\"\" value=\"\">\n                    <em>{placeholder}</em>\n                </MenuItem>\n                {(options || []).map(item=><MenuItem key={item.key} value={item.key}>{item.value}</MenuItem>)}\n            </TextField>}\n      </div>\n    )\n}\n","import { Box } from '@mui/system'\nimport { useState } from 'react'\nimport { GDatePicker } from '../../../common/date-picker/GDatePicker';\nimport GSelect, { GSelectOption } from '../../../common/select/GSelect';\n\nexport default function CriteriaFilter() {\n    const [crane, setCrane] = useState('')\n    const [zone, setZone] = useState('');\n    const [date, setDate] = useState<Date | null>(null);\n\n    const cranes: GSelectOption[] = [\n        { key: \"crane1\", value: \"Crane1\" },\n        { key: \"crane2\", value: \"Crane2\" },\n        { key: \"crane3\", value: \"Crane3\" }\n    ];\n    const zones: GSelectOption[] = [\n        { key: \"zone1\", value: \"Zone1\" },\n        { key: \"zone2\", value: \"Zone2\" },\n        { key: \"zone3\", value: \"Zone3\" }\n    ];\n\n    const handleChangeCrane = (value: string) => {\n        setCrane(value);\n    };\n    const handleChangeZone = (value: string) => {\n        setZone(value);\n    };\n\n    return (\n        <>\n            <Box className=\"dropdown\" mr={1}>\n                <GDatePicker date={date} onChange={setDate} dateDelete={true} />\n            </Box>\n            <Box className=\"dropdown\" mr={1}>\n                <GSelect id=\"crane\" placeholder=\"Select Crane\" options={cranes} onChange={handleChangeCrane} value={crane} />\n            </Box>\n            <Box className=\"dropdown\" mr={1}>\n                <GSelect id=\"zone\" placeholder=\"Select Zone\" options={zones} onChange={handleChangeZone} value={zone} />\n            </Box>\n        </>\n    )\n}\n","import { ToggleButtonGroup, ToggleButton } from '@mui/material'\nimport React from 'react'\nimport './g-toggle-button-group.scss'\n\nexport interface GToggleButtonOption{\n    value: string;\n    label: string;\n}\n\ninterface GToggleButtonGroupProps{\n    formats: string[];\n    setFormats: (formats:string[])=> void;\n    options: GToggleButtonOption[];\n    singleSelect?:boolean;\n}\n\nexport default function GToggleButtonGroup({options, formats, singleSelect=false, setFormats}: GToggleButtonGroupProps) {\n\n\n    const handleFormat = (event: React.MouseEvent<HTMLElement>, newFormats: string[]) => {\n        if(singleSelect){\n            setFormats([(event.target as HTMLButtonElement).value]);\n        }else{\n            setFormats(newFormats);\n        }\n    };\n    return (\n        <ToggleButtonGroup\n            value={formats}\n            onChange={handleFormat}\n            aria-label=\"custom-toggle-button-group\"\n            className=\"group-filter\">\n            {(options || []).map(item=><ToggleButton value={item.value} aria-label={item.value}>\n                {item.label}\n            </ToggleButton>)}\n        </ToggleButtonGroup>\n    )\n}\n","import { ToggleButtonGroup, ToggleButton } from '@mui/material'\nimport React from 'react'\nimport GToggleButtonGroup, { GToggleButtonOption } from '../../../common/toggle-group/GToggleButtonGroup';\n\nimport './status-filter.scss'\n\nexport default function StatusFilter() {\n    const [formats, setFormats] = React.useState<string[]>(()=>[]);\n    const options: GToggleButtonOption[] = [\n        {value:\"all\", label:\"All\"},\n        {value:\"pending\", label:\"Pending\"},\n        {value:\"scheduling\", label:\"Scheduling\"},\n        {value:\"inprogress\", label:\"In Progress\"},\n        {value:\"rejected\", label:\"Rejected\"},\n        {value:\"rescheduled\", label:\"Rescheduled\"}\n    ];\n\n    return (\n        <>\n            <GToggleButtonGroup formats={formats} setFormats={setFormats} options={options}/>\n        </>\n    )\n}\n","import { Box } from '@mui/system'\nimport React from 'react'\nimport CriteriaFilter from './criteria-filter/CriteriaFilter'\nimport StatusFilter from './status-filter/StatusFilter'\n\nexport default function Filters() {\n    return (\n        <>\n            <Box sx={{display: 'flex'}} mb={1}>\n                <CriteriaFilter/>\n            </Box>\n            <Box sx={{display: 'flex'}}>\n                <StatusFilter/>\n            </Box>\n        </>\n    )\n}\n","import * as Yup from \"yup\";\n\nexport const requestNewValidationSchema = Yup.object().shape({\n  contractor: Yup\n    .string()\n    .required('Contractor name is required'),\n  zone: Yup\n    .string()\n    .required(\"Zone is required\")\n});","import { Dialog, DialogTitle, Typography, IconButton, DialogContent, DialogContentText, InputLabel, Input, DialogActions, Button, DialogProps } from '@mui/material'\nimport React, { useRef } from 'react'\nimport CloseIcon from '@mui/icons-material/Close';\nimport './g-dialog.scss'\n\ninterface GDialogProps{\n    children: React.ReactNode;\n    title: string;\n    open:boolean;\n    size? : 'small' | 'medium' | 'large'\n    showDialog: (status:boolean)=>void;\n}\nexport default function GDialog(props: GDialogProps) {\n    const [scroll, setScroll] = React.useState<DialogProps['scroll']>('paper');\n    const {open, showDialog, size=\"small\"} = props;\n    \n    return (\n        <Dialog\n            disablePortal\n            open={open}\n            onClose={showDialog}\n            scroll={scroll}\n            fullWidth={true}\n            maxWidth = {`${size === 'medium' ? 'sm' : size === 'large' ? 'md' : 'xs'}`}\n            className=\"dialog-container\"\n            aria-labelledby=\"scroll-dialog-title\"\n            aria-describedby=\"scroll-dialog-description\"\n        >\n            <DialogTitle id=\"scroll-dialog-title\" className=\"dialog-title\">\n                <Typography variant=\"h6\" component={'span'}>{props.title}</Typography>\n                <IconButton onClick={()=>showDialog(false)}>\n                    <CloseIcon/>\n                </IconButton>\n            </DialogTitle>\n            <DialogContent dividers={scroll === 'paper'}>\n                <DialogContentText component={'span'}\n                    id=\"scroll-dialog-description\"\n                    tabIndex={-1}>\n                    {props.children}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions sx={{display: 'flex', justifyContent:'left'}}>\n                    <Button variant=\"contained\" type=\"submit\" form=\"request-new-form\">Submit</Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n","import { FormatLineSpacing } from '@mui/icons-material'\nimport { InputLabel, Input, Typography } from '@mui/material'\nimport {  FormikProps, FormikValues } from 'formik'\nimport './g-input.scss'\n\ninterface GFormInputProps<T extends FormikValues>{\n    formik: FormikProps<T>\n    id:string;\n    label:string;\n    required?:boolean;\n}\n\nexport function GFormInput<T extends FormikValues>({formik, id, label,required}:GFormInputProps<T>) {\n    return (\n        <div className=\"custom-input\">\n            <InputLabel id={id}>{label}</InputLabel>\n            <Input required={required} fullWidth id={id} aria-label={id}\n                name={id} autoComplete=\"off\" autoFocus \n                value={formik.values[id]}\n                onBlur={()=>formik.validateField(id)}\n                onChange={formik.handleChange}\n                error={formik.touched[id] && Boolean(formik.errors[id])}/>\n            {formik.touched[id] && formik.errors[id] && \n                <Typography variant=\"error\" component=\"span\">\n                    {formik.errors[id]}\n                </Typography>\n            }\n        </div>\n    )\n}\n\n","import { DialogProps, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button, Input, InputLabel, FormControl, MenuItem, Select, NativeSelect, IconButton, Typography, Grid } from '@mui/material';\nimport { useFormik } from 'formik';\nimport React from 'react'\nimport { requestNewValidationSchema } from './RequestNewFormValidation';\nimport CloseIcon from '@mui/icons-material/Close';\nimport './request-new.scss'\nimport GDialog from '../../common/dialog/GDialog';\nimport { GFormInput } from '../../common/input/GInput';\nimport { GFormSelect, GSelectOption } from '../../common/select/GSelect';\nimport GFormDatePicker from '../../common/date-picker/GDatePicker';\n\n\ninterface RequestNewFormFields {\n    contractor: string;\n    zone: string | number;\n}\n\ninterface RequestNewProps {\n    open: boolean;\n    showDialog: (status: boolean) => void;\n    handleSubmit: (data: any) => void;\n}\n\nexport default function RequestNew({ open, showDialog, handleSubmit }: RequestNewProps) {\n    const initialValues: RequestNewFormFields = { contractor: '', zone: '' };\n    const zones: GSelectOption[] = [\n        { key: \"zone1\", value: \"Zone1\" },\n        { key: \"zone2\", value: \"Zone2\" },\n        { key: \"zone3\", value: \"Zone3\" }\n    ];\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        validationSchema: requestNewValidationSchema,\n        validateOnChange: false,\n        onSubmit: (data) => {\n            handleSubmit(data)\n        },\n    });\n\n    return (\n        <GDialog title=\"Request Booking\" open={open} showDialog={showDialog}>\n            <form id=\"request-new-form\" className=\"groundup-form\" onSubmit={formik.handleSubmit}>\n                <GFormInput<RequestNewFormFields> formik={formik} id=\"contractor\" label=\"Contractor\" />\n                <GFormSelect<RequestNewFormFields> formik={formik} id=\"zone\" label=\"Zone\" options={zones} />\n                <Grid xs={12} container>\n                    <Grid xs={4}>\n                        <GFormDatePicker<RequestNewFormFields> formik={formik} id=\"startTime\" label=\"Time Start\" timeonly={true} />\n                    </Grid>\n                    <Grid xs={4}>\n                        <GFormDatePicker<RequestNewFormFields> formik={formik} id=\"endTime\" label=\"End Start\" timeonly={true} />\n                    </Grid>\n                </Grid>\n            </form >\n        </GDialog >\n    )\n}\n","\n\nimport { Button } from '@mui/material'\nimport React from 'react'\n\ninterface GButtonProps {\n    title?: string;\n    variant?: \"text\" | \"outlined\" | \"contained\";\n    size?: \"small\" | \"medium\" | \"large\";\n    color?: \"inherit\" | \"primary\" | \"secondary\" | \"success\" | \"error\" | \"info\" | \"warning\";\n    style?: Object;\n    sx?: Object;\n    className?: string;\n    onClick?: (e: React.MouseEvent<HTMLElement>) => void;\n    startIcon?: React.ReactNode;\n    endIcon?: React.ReactNode;\n    type?: 'button' | 'submit' | 'reset'\n}\n\nexport default function GButton(props: GButtonProps) {\n\n    const { \n        title = '',\n        variant = 'contained', \n        size = 'medium', \n        color = 'primary', \n        style = {}, \n        sx= {}, \n        className = '', \n        onClick = () => ({}), \n        startIcon, \n        endIcon,\n        type } = props;\n\n    return (\n        <Button type={type} variant={variant} size={size} style={style} color={color} sx={sx} className={className} onClick={onClick} startIcon={startIcon} endIcon={endIcon} >\n            {title}\n        </Button>\n    )\n}\n","export function tConvert (timeString:string) {\n    const H = +timeString.substr(0, 2);\n    const h = H % 12 || 12;\n    const ampm = (H < 12 || H === 24) ? \" AM\" : \" PM\";\n    return ( h + timeString.substr(2, 3) + ampm )\n  }\n\nexport function dateFormator (date : string){\n\n    const months = [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n         \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ];\n\n    let dateMonth = parseInt(date.substring(5,7))\n    const selectedMonthName = months[dateMonth - 1];\n    const finalDate = date.substring(0,5) + selectedMonthName.toString() + date.substring(7,10)\n    \n    return finalDate \n  }","import { Button, Link, Typography } from '@mui/material'\nimport AddIcon from '@mui/icons-material/Add';\nimport { Box } from '@mui/system';\nimport './booking-view.scss';\nimport GTable from '../common/table/GTable';\nimport Filters from './filters/Filters';\nimport { useState } from 'react';\nimport RequestNew from './request-new/RequestNew';\nimport GButton from '../common/button/GButton';\nimport { useHistory, useLocation } from 'react-router';\nimport { HOME_BOOKING_REVIEW } from '../../constants/ContextPaths';\nimport React from 'react';\nimport { RootState } from '../../store/reducers';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { bookingsActionCreators } from '../../store/action-creators'\nimport { bindActionCreators } from 'redux'\nimport { BookingsState } from '../../store/reducers/bookings'\nimport { tConvert, dateFormator } from '../../../src/util/utility'\n\n\ninterface BookingManagementRowsTypes {\n    date: string;\n    timeStart: string;\n    timeEnd: string;\n    zone: string;\n    crane: {name: string};\n    taskType: string,\n    status: JSX.Element,\n}\n\ninterface Data {\n    DateString: string;\n    TimeStart: string;\n    TimeEnd: string;\n    Zone: string;\n    Crane: { name : string};\n    TaskType: string;\n    Status: JSX.Element;\n  }\n\ninterface Column {\n    id: \"date\" | \"timeStart\" | \"timeEnd\" | \"zone\" | \"crane\" | \"taskType\" | \"status\";\n    label: string;\n    minWidth?: number;\n    align?: \"right\" | \"left\";\n    format?: (value: number) => string;\n  }\n  \n  const columns: Column[] = [\n    { id: \"date\", label: \"Date\", minWidth:120 },\n    { id: \"timeStart\", label: \"Time Start\", align: \"left\"},\n    {\n      id: \"timeEnd\",\n      label: \"Time End\",\n      align: \"left\",\n    },\n    {\n      id: \"zone\",\n      label: \"Zone\",\n      align: \"left\",\n    },\n    {\n      id: \"crane\",\n      label: \"Crane\",\n      align: \"left\",\n    },\n    {\n      id: \"taskType\",\n      label: \"Task Type\",\n      align: \"left\",\n    },\n    {\n      id: \"status\",\n      label: \"Status\",\n      align: \"left\",\n    },\n  \n  ];\n\nexport default function BookingView() {\n    const [selectData, setSelectData] = useState<any>(null);\n    const [open, setOpen] = useState(false);\n\n    const history = useHistory();\n    const { search } = useLocation();\n\n    const dispatch = useDispatch();\n    const { getBookings } = bindActionCreators(bookingsActionCreators, dispatch)\n    const { data, loading, error }: BookingsState = useSelector((state: RootState) => state.bookings);\n\n    const [bookingManagementRows, setBookingManagementRows] = useState<BookingManagementRowsTypes []>([]);\n    const tempBookingManagementRows: BookingManagementRowsTypes[] = []\n\n    function formatData(\n      TimeStart: string,\n      TimeEnd: string,\n      Zone: string,\n      Crane: { name: string },\n      TaskType: string,\n      Status: string\n    ): BookingManagementRowsTypes {\n      const date = dateFormator(TimeStart.substring(0, 10).split(\"-\").join(\" \"))\n      const timeStart = tConvert(TimeStart.substring(11, 16));\n      const timeEnd = tConvert(TimeEnd.substring(11, 16));\n      const zone = Zone;\n      const crane = Crane;\n      const taskType = TaskType;\n      const status = <GButton  title='Pending' size='small' color='secondary' sx={{width:'100%', backgroundColor:'secondary.dark', textTransform:'capitalize'}} />\n\n        // if(Status.toLowerCase() == \"rejected\"){\n        //   return <GButton  title='Rejected' color='error' size='small' sx={{width:'100%', textTransform:'capitalize'}} />\n        // } else if (Status.toLowerCase() == \"pending\") {\n        //   return  <GButton  title='Pending' size='small' color='secondary' sx={{width:'100%', backgroundColor:'secondary.dark', textTransform:'capitalize'}} />\n        // } else if (Status.toLowerCase() == \"unscheduled\") {\n        //   <GButton  title='Unscheduled' color='primary' size='small' sx={{width:'100%', textTransform:'capitalize'}} />\n        // } else {\n        //   return <GButton  title={Status} size='small' color='secondary' sx={{width:'100%', backgroundColor:'secondary.dark', textTransform:'capitalize'}} />\n        // }\n\n      return { date, timeStart, timeEnd, zone, crane, taskType, status };\n    }\n\n    React.useEffect(() => {\n        getBookings()        \n    }, [])\n\n    React.useEffect(() => {\n        \n        (data || []).map((dataOne, index) => {\n            let formattedData = formatData(\n              dataOne['start_time'], \n              dataOne['end_time'],\n              dataOne['zone'],\n              dataOne['crane_id']['name'],\n              dataOne['tasktype'],\n              dataOne['status'],\n              )\n            tempBookingManagementRows.push(formattedData)\n            \n        })\n\n        setBookingManagementRows(tempBookingManagementRows)\n    }, [data])\n\n    const handleShowDialog = (status: boolean) => {\n        setOpen(status);\n    }\n\n    const handleSelectData = (selectData: any) => {\n        setSelectData(selectData);\n        history.push(HOME_BOOKING_REVIEW);\n    }\n\n    React.useEffect(() => {\n        let query = new URLSearchParams(search);\n        if (query && query.get('from') === 'chart') {\n            setOpen(true);\n        }\n    }, [])\n\n    return (\n        <Box className=\"page-container\">\n            <Box sx={{ display: 'flex' }} mb={1}>\n                <Typography variant=\"h5\" component=\"h2\" className='heading-text'>\n                    Crane Bookings\n                </Typography>\n                <GButton title=\"Request New\" startIcon={<AddIcon />} onClick={() => setOpen(true)} />\n            </Box>\n            <Filters />\n            <Box>\n                <Box>\n                    <GTable rowClicked={(selectData: any) => handleSelectData(selectData)} rows={bookingManagementRows} columns={columns} />\n                    <RequestNew open={open} showDialog={handleShowDialog} handleSubmit={() => { setOpen(false) }} />\n                </Box>\n            </Box>\n        </Box>\n    )\n}\n\n","import { Box } from '@mui/system'\nimport './g-pane.scss';\nimport { Typography } from '@mui/material';\n\ninterface GPaneProps{\n    label?:string\n    children: React.ReactNode;\n}\n\nexport default function GPane({label, children}:GPaneProps) {\n    return (\n        <>\n            <Box className=\"header\">\n                {label && <Typography variant=\"paneheader\">{label}</Typography>}\n            </Box>\n            <Box className=\"content\">\n                {children}\n            </Box>\n        </>\n    )\n}\n","\n\nexport const StatusData = [\n    {\n        label:'Date',\n        value: '22 Jun 2021'\n    },\n    {\n        label:'Time Start',\n        value: '11:00 PM'\n    },\n    {\n        label:'Time End',\n        value: '13:00 PM'\n    },\n    {\n        label:'Zone',\n        value: 'Location A'\n    },\n    {\n        label:'Crane',\n        value: 'Crane 2'\n    },\n    {\n        label:'Task Type',\n        value: 'Carrying Loads'\n    },\n]","import { Box } from '@mui/material'\nimport clsx from 'clsx';\nimport React from 'react'\n\ninterface GButtonGroup {\n    className?: { buttonClassName?: string, listClassName?: string, optionClassName?: string};\n    id?: string;\n    options?: Array<any>;\n    title?: string;\n    btnStyle? : object\n}\n\nexport default function GButtonGroup(props: GButtonGroup) {\n\n    const { className={} , id='', options=[], title='', btnStyle={} } = props;\n    const { buttonClassName = '', listClassName = '', optionClassName = '' } = className;\n\n    return (\n        <Box className=\"dropdown\" mr={1}>\n            <button className={clsx('btn dropdown-toggle dropdown-button', buttonClassName)} style={btnStyle} type=\"button\" id={id} data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                {title}\n            </button>\n            <ul className={clsx('dropdown-menu', listClassName)} >\n                {\n                    options && options.map(\n                        ({ label, href }) => \n                        <li><a className={clsx(\"dropdown-item\", optionClassName) }href={href}>{label}</a></li>)\n                }\n            </ul>\n        </Box>\n    )\n}\n","import { Box, Typography, useTheme } from '@mui/material'\nimport React from 'react'\nimport GButton from '../button/GButton';\nimport './StatusHeader.scss';\nimport { StatusData } from '../../../mockData/StatusHeaderData';\nimport GButtonGroup from '../buttonGroup/GButtonGroup';\n\ninterface StatusHeader {\n    ButtonTitle?: string;\n    ButtonGroupTitle?: string;\n    options?: Array<any>\n}\n\nexport default function StatusHeader(props: StatusHeader) {\n\n    const { ButtonTitle = 'Approve', ButtonGroupTitle='More' } = props;\n\n    const options = [\n        {\n            label:'Reshcedule Booking',\n            href:'#'\n        },\n        {\n            label:'Reject Booking',\n            href:'#'\n        },\n        {\n            label:'Delete Booking',\n            href:'#'\n        },\n    ]\n\n    const theme = useTheme();\n\n    const { palette } = theme;\n\n    return (\n        <Box className=\"status-header-container\" sx={{backgroundColor:'secondary.main'}}>\n            <Box className=\"status-header-wrapper\">\n\n                {\n                    StatusData && StatusData.map(\n                        ( {label, value} ) => \n                            <Box className=\"status-item-container\" >\n                                <Typography variant=\"subtitle2\" className=\"status-item-label\" >\n                                    {label}\n                                </Typography>\n                                <Typography variant=\"subtitle2\" >\n                                    {value}\n                                </Typography>\n                            </Box> )\n                }\n            \n            </Box>\n            <Box className=\"status-button-container\" >\n                {true && <GButton title={ButtonTitle} className=\"status-approve-btn\" size='small' color='success' />}\n                <GButtonGroup title={ButtonGroupTitle} options={options} className={{ buttonClassName: 'gButtonGroup' }} btnStyle={{backgroundColor: palette.primary.main, color:'white'}} />\n            </Box>\n        </Box>\n    )\n}\n","import { Box } from '@mui/material'\nimport React from 'react'\nimport { Button, Link, Typography } from '@mui/material'\nimport { HOME_BOOKING } from '../../constants/ContextPaths';\nimport { useHistory } from 'react-router';\nimport GPane from '../common/pane/GPane';\nimport GButton from '../common/button/GButton';\nimport StatusHeader from '../common/status-header/StatusHeader';\n\nexport default function BookingReviewView() {\n    const history = useHistory();\n    return (\n        <>\n           <Box sx={{ display: 'flex' }} mb={2}>\n                <Link\n                    component=\"button\"\n                    variant=\"body2\"\n                    underline=\"none\"\n                    onClick={() => {\n                        history.push(HOME_BOOKING)\n                    }}\n                    >\n                        <Typography variant=\"subtitle2\">&lt; Back</Typography>\n                </Link>\n            </Box>\n            <StatusHeader />\n            <br/>\n            <Box>\n                <GPane label=\"Booking Details\">\n                    <GButton title='Add Activity' size='small' style={{ display:'block', margin:'10px 0' }} />\n                </GPane>\n            </Box>\n        </>\n    )\n}\n","import { SelectChangeEvent } from '@mui/material';\nimport { Box } from '@mui/system'\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../store/reducers';\nimport { GDatePicker } from '../../common/date-picker/GDatePicker';\nimport GSelect, { GSelectOption } from '../../common/select/GSelect';\n\nexport default function CriteriaFilter(\n    {\n        date,\n        setDate,\n        crane,\n        setCrane\n    }: any\n) {\n\n\n    const selectDistinctCranes = (items: any[]) => {\n        let lookup: any = {};\n        let result: GSelectOption[] = [];\n\n        for (let item, i = 0; item = items[i++];) {\n            let name = item.crane_id.name;\n\n            if (!(name in lookup)) {\n                lookup[name] = 1;\n                result.push({\n                    key: name, value: name\n                });\n            }\n        }\n        return result;\n    }\n\n    const reduxState = useSelector((state: RootState) => {\n        const { bookings: { data = [] } = {} } = state || {};\n        return {\n            bookings: data,\n            cranes: selectDistinctCranes(data.filter((booking: { crane_id: any }) => booking.crane_id))\n        }\n    });\n\n    return (\n        <>\n            <Box sx={{ display: 'flex' }} mb={1}>\n                <Box className=\"dropdown\" mr={1}>\n                    <GDatePicker date={date} onChange={setDate} dateDelete={true} />\n                </Box>\n                <Box className=\"dropdown\" mr={1}>\n                    <GSelect id=\"Crane\" placeholder=\"Select Crane\" options={reduxState.cranes} onChange={setCrane} value={crane} />\n                </Box>\n            </Box>\n        </>\n    )\n}\n","import React from 'react';\nimport { GranttChartData } from './interface';\n\ninterface rowDataInterface {\n    rowData: GranttChartData\n}\n\nconst ChartRow = ({ rowData }: rowDataInterface) => {\n    const { id, craneColor, crane, location, liftType, width, color, left } = rowData;\n    return (\n        id ? <div className=\"single-row\">\n            <div className=\"single-row-left single-row-left-box\">\n                <div className=\"single-row-left-text\"> <span className=\"crane-status-color\" style={{ backgroundColor: craneColor }}></span>{crane}</div>\n                <div className=\"single-row-left-text\">{location}</div>\n                {/* <div className=\"single-row-left-text\">{liftType}</div> */}\n            </div>\n            <div className=\"single-row-right-box\">\n                <div className=\"timing-box\" style={{ width: width, backgroundColor: color, left: left }}></div>\n            </div>\n        </div> : null\n    );\n}\n\nexport default ChartRow;","import * as React from 'react';\nimport Stack from '@mui/material/Stack';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\n// Boiler code to call GToast component\n// const [open, setOpen] = useState(false);\n// const notificationToggleState = () => {\n//     setOpen(!open);\n// };\n// notificationToggleState()\n\ninterface GToastProps {\n    severity: 'success' | 'info' | 'warning' | 'error';\n    message: string;\n    autoHideDuration?: number;\n    notificationToggleState: ()=>void;\n    open : boolean;\n}\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport default function GToast(props: GToastProps) {\n    const { autoHideDuration = 6000 } = props;\n\n    return (\n        <Stack spacing={2} sx={{ width: '100%' }}>\n            <Snackbar open={props.open} autoHideDuration={autoHideDuration} onClose={props.notificationToggleState}>\n                <Alert onClose={props.notificationToggleState} severity={props.severity} sx={{ width: '100%' }}>\n                    {props.message}\n                </Alert>\n            </Snackbar>\n        </Stack>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport './index.scss';\nimport GToggleButtonGroup, { GToggleButtonOption } from '../../common/toggle-group/GToggleButtonGroup';\nimport { LinearProgress, Typography } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../store/reducers';\nimport ChartRow from './ChartRow';\nimport { GranttChartData } from './interface';\nimport GToast from '../../common/toast/GToast';\n\nconst totalMinutesInaDay: number = 1440;\n\nconst totalMinutesInaWeek: number = 7 * totalMinutesInaDay;\n\nconst dayRightColumns: string[] = [\"00:00\", \"02:00\", \"04:00\", \"06:00\", \"08:00\", \"10:00\", \"12:00\", \"14:00\", \"16:00\", \"18:00\", \"20:00\", \"22:00\", \"24:00\"]\n\nconst GranttChart = ({\n    selectedDate,\n    selectedCrane\n}: any) => {\n\n    const [formats, setFormats] = React.useState<string[]>(() => ['day']);\n\n    const [newdata, setData] = useState<GranttChartData[]>([]);\n\n    const [rightColumns, setRightColumns] = useState<string[]>(dayRightColumns);\n\n    const [toastOpen, setToastOpen] = useState<boolean>(true);\n\n    const options: GToggleButtonOption[] = [\n        { value: \"day\", label: \"Day\" },\n        { value: \"week\", label: \"Week\" }\n    ];\n\n    const weekRightColumns = () => {\n        let curr = new Date(selectedDate);\n        let week = [];\n        if (selectedDate) {\n            for (let i = 1; i <= 7; i++) {\n                let first = curr.getDate() - curr.getDay() + i\n                let day = new Date(curr.setDate(first)).toDateString().slice(0, 10);\n                week.push(day)\n            }\n        }\n        return week;\n    }\n\n    const reduxState = useSelector((state: RootState) => {\n        const { bookings: { data = [], loading = false, error = '' } = {} } = state || {};\n        return {\n            bookings: data,\n            loading,\n            error\n        }\n    });\n\n    const checkForSelctedValuesMatch = (startTime: any, craneName: string) => {\n        const startDate = new Date(startTime);\n        const selected = selectedDate ? new Date(selectedDate) : null;\n        const dateMatched = selected ? (startDate &&\n            startDate.getDate() == selected.getDate() &&\n            startDate.getMonth() == selected.getMonth() &&\n            startDate.getFullYear() == selected.getFullYear()) : false;\n        const craneMatched = selectedCrane ? selectedCrane === craneName : true;\n        if (\n            dateMatched && craneMatched\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    const getLeftPercentageDay = (startTime: any) => {\n        const startDate = new Date(startTime);\n        const timeInMinutes = (startDate.getHours() * 60) + (startDate.getMinutes());\n        return (timeInMinutes / totalMinutesInaDay) * 100;\n    }\n\n    const getWidthPercentageDay = (startTime: any, endTime: any) => {\n        const timediffInMinutes: number = (new Date(endTime).getTime() - new Date(startTime).getTime()) / (1000 * 60);\n        return (timediffInMinutes / totalMinutesInaDay) * 100;\n    }\n\n    const checkForDaysMatch = (startTime: any, craneName: string) => {\n        const startDate = new Date(startTime);\n        let dateMatched = false;\n        const days = weekRightColumns();\n        const craneMatched = selectedCrane ? selectedCrane === craneName : true;\n        days.map(day => {\n            const selectedDay = new Date(day);\n            if (!dateMatched)\n                dateMatched = startDate ?\n                    (startDate.getDate() == selectedDay.getDate() &&\n                        startDate.getMonth() == selectedDay.getMonth() &&\n                        startDate.getFullYear() == new Date().getFullYear()) : false;\n        });\n        if (dateMatched && craneMatched)\n            return true;\n        return false;\n    }\n\n    const getLeftPercentageWeek = (startTime: any) => {\n        const startDate = new Date(startTime);\n        let timeInMinutes = (startDate.getHours() * 60) + (startDate.getMinutes());\n        const days = weekRightColumns();\n        let minutesToAdd = 0;\n        let dateMatched = false;\n        days.map(day => {\n            const selectedDay = new Date(day);\n            if (!dateMatched) {\n                dateMatched = startDate ?\n                    (startDate.getDate() == selectedDay.getDate() &&\n                        startDate.getMonth() == selectedDay.getMonth() &&\n                        startDate.getFullYear() == new Date().getFullYear()) : false;\n                if (!dateMatched)\n                    minutesToAdd += totalMinutesInaDay;\n            }\n\n        });\n        return ((minutesToAdd + timeInMinutes) / totalMinutesInaWeek) * 100;\n    }\n\n    const getWidthPercentageWeek = (startTime: any, endTime: any) => {\n        const timediffInMinutes: number = (new Date(endTime).getTime() - new Date(startTime).getTime()) / (1000 * 60);\n        return (timediffInMinutes / totalMinutesInaWeek) * 100;\n    }\n\n    useEffect(() => {\n        if (reduxState && reduxState.bookings && reduxState.bookings.length > 0) {\n            const { bookings } = reduxState;\n            let filteredBookings = [];\n            filteredBookings = bookings\n                .filter((booking: { crane_id: any; }) => booking.crane_id)\n            const timeSelection = formats && formats[0];\n            if (timeSelection === 'week') {\n                setRightColumns(weekRightColumns);\n                filteredBookings = filteredBookings.filter(\n                    (booking: { start_time: any, crane_id: { name: string }, zone: string }) => checkForDaysMatch(booking.start_time, booking.crane_id.name)\n                ).map((booking:\n                    { crane_id: { name: string, _id: string }; zone: string; start_time: any, end_time: any, status: string, createdAt: any }\n                ) => {\n                    const { crane_id: { name = '', _id = '' } = {}, zone, start_time, end_time, status, createdAt } = booking;\n                    let color = 'transparent';\n                    if (status === 'Pending' || status === 'Unscheduled') {\n                        color = \"#b7b7b7\"\n                    } else if (status === 'Completed') {\n                        color = '#3478fc';\n                    } else if (status === 'Rescheduled') {\n                        color = '#8d3ed4'\n                    }\n                    return {\n                        id: _id,\n                        crane: name,\n                        location: zone,\n                        liftType: \"Install Framework\",\n                        width: getWidthPercentageWeek(start_time, end_time) + '%',\n                        left: getLeftPercentageWeek(start_time) + '%',\n                        color: color,\n                        craneColor: \"#ff8d8d\",\n                        createdAt\n                    }\n                });\n\n            } else {\n                setRightColumns(dayRightColumns);\n                filteredBookings = filteredBookings.filter(\n                    (booking: { start_time: any, crane_id: { name: string }, zone: string }) => checkForSelctedValuesMatch(booking.start_time, booking.crane_id.name)\n                )\n                    .map((booking:\n                        { crane_id: { name: string, _id: string }; zone: string; start_time: any, end_time: any, status: string, createdAt: any }\n                    ) => {\n                        const { crane_id: { name = '', _id = '' } = {}, zone, start_time, end_time, status, createdAt } = booking;\n                        let color = 'transparent';\n                        if (status === 'Pending' || status === 'Unscheduled') {\n                            color = \"#b7b7b7\"\n                        } else if (status === 'Completed') {\n                            color = '#3478fc';\n                        } else if (status === 'Rescheduled') {\n                            color = '#8d3ed4'\n                        }\n                        return {\n                            id: _id,\n                            crane: name,\n                            location: zone,\n                            liftType: \"Install Framework\",\n                            width: getWidthPercentageDay(start_time, end_time) + '%',\n                            left: getLeftPercentageDay(start_time) + '%',\n                            color: color,\n                            craneColor: \"#ff8d8d\",\n                            createdAt\n                        }\n                    });\n            }\n            setData(filteredBookings);\n        }\n    }, [reduxState.bookings, formats, selectedDate, selectedCrane])\n\n\n    const leftColumns: string[] = [\"Crane\", \"Location\"];\n    return <>\n        {reduxState.loading === true ? (<LinearProgress />)\n            : reduxState.loading === false && reduxState.error !== '' ? <GToast severity=\"error\" message={reduxState.error} open={toastOpen} notificationToggleState={() => { setToastOpen(false) }} /> :\n                <>\n                    <Typography variant=\"h4\" className=\"grantt-chart-heading\">All Cranes</Typography>\n                    <div className=\"grantt-chart-header-container\">\n                        <div className=\"status-container\">\n                            <span className=\"status-text\"><span className=\"status-color\" style={{ backgroundColor: \"#b7b7b7\" }}></span>Pending</span>\n                            <span className=\"status-text\"><span className=\"status-color\" style={{ backgroundColor: \"#3478fc\" }}></span>Completed</span>\n                            <span className=\"status-text\"><span className=\"status-color\" style={{ backgroundColor: \"#8d3ed4\" }}></span>Rescheduled</span>\n                        </div>\n                        <div>\n                            <GToggleButtonGroup formats={formats} setFormats={setFormats} options={options} singleSelect={true} />\n                        </div>\n                    </div>\n                    <div className=\"grantt-chart-main-container\">\n                        <div className=\"single-row\">\n                            <div className=\"single-row-left\">\n                                {\n                                    leftColumns.map(leftColumn =>\n                                        <div className=\"single-row-left-text\">{leftColumn}</div>\n                                    )\n                                }\n                            </div>\n                            <div className=\"single-row-right\">\n                                {\n                                    rightColumns.map(rightColumn =>\n                                        <div>{rightColumn}</div>\n                                    )\n                                }\n                            </div>\n                        </div>\n                        {\n                            (newdata && newdata.length > 0) ? newdata.map(a =>\n                                <ChartRow rowData={a} key={a.id + a.crane + a.location + a.createdAt} />\n                            ) : <div className='no-data'>No Data Available</div>\n                        }\n                    </div>\n                </>\n        }\n    </>\n\n}\n\nexport default GranttChart;","import { Button, Link, Typography } from '@mui/material'\nimport AddIcon from '@mui/icons-material/Add';\nimport { Box } from '@mui/system';\nimport './grant-chart-view.scss';\nimport CriteriaFilter from './criteria-filter/CriteriaFilter';\nimport React, { useEffect, useState } from 'react';\nimport GranttChart from './grantt-chart/index';\nimport { bookingsActionCreators } from '../../store/action-creators';\nimport { bindActionCreators } from 'redux';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from \"react-router-dom\";\nimport { HOME_BOOKING_FROM_GRANTT_CHART } from '../../constants/ContextPaths';\n\nexport default function GranttChartView() {\n    const [date, setDate] = useState<Date | null>(new Date());\n    const [crane, setCrane] = useState('');\n    const history = useHistory();\n\n    const dispatch = useDispatch();\n    const { getBookings } = bindActionCreators(bookingsActionCreators, dispatch);\n    useEffect(() => {\n        getBookings();\n    }, []);\n\n    const navigateTo = () => history.push(HOME_BOOKING_FROM_GRANTT_CHART);\n\n    return (\n        <Box className=\"page-container\">\n            <Box sx={{ display: 'flex' }} mb={1}>\n                <Typography variant=\"h5\" component=\"h2\" className='heading-text'>\n                    Grantt Chart\n                </Typography>\n                <Button variant=\"contained\" startIcon={<AddIcon />} onClick={navigateTo}>\n                    Request New\n                </Button>\n            </Box>\n            <CriteriaFilter date={date} setDate={setDate} crane={crane} setCrane={setCrane} />\n            <GranttChart selectedDate={date} selectedCrane={crane} />\n        </Box>\n    )\n}\n","import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport GroundUpDrawer from \"../../components/common/drawer/GDrawer\";\nimport GroundUpAppBar from \"../../components/common/header/GroundUpAppBar\";\nimport { HOME_BOOKING, HOME_BOOKING_REVIEW, HOME_GRANTT_CHART } from \"../../constants/ContextPaths\";\nimport BookingView from \"../../components/booking-view/BookingView\";\nimport BookingReviewView from \"../../components/booking-review-view/BookingReviewView\";\nimport GranttChartView from \"../../components/grant-chart-view/GranttChartView\";\n\ninterface HomeProps {\n    children?: any;\n}\n\nconst Home: React.FC<HomeProps> = (props: HomeProps) => {\n    const [open, setOpen] = React.useState(false);\n    const [headerTab, setHeaderTab] = React.useState(0);\n\n    const handleDrawerToggle = () => {\n        setOpen(!open);\n    };\n    const drawerItems = [\n        { text: 'Crane Booking', id: HOME_BOOKING, notifications: 20 },\n        { text: 'Grantt Chart', id: HOME_GRANTT_CHART },\n        { text: 'Calendar', id: '/home/calendar' }\n    ]\n    return (\n        <>\n            <GroundUpAppBar headerTab={headerTab} setHeaderTab={setHeaderTab} handleDrawerToggle={handleDrawerToggle} />\n            <GroundUpDrawer items={drawerItems} mobileOpen={open} handleDrawerToggle={handleDrawerToggle}>\n                <Switch>\n                    <Route path={HOME_BOOKING} exact>\n                        <BookingView />\n                    </Route>\n                    <Route path={HOME_BOOKING_REVIEW}>\n                        <BookingReviewView />\n                    </Route>\n                    <Route path={HOME_GRANTT_CHART}>\n                        <GranttChartView />\n                    </Route>\n                </Switch>\n            </GroundUpDrawer>\n        </>\n    );\n}\n\nexport default Home;","import { Checkbox, Typography } from '@mui/material'\nimport { FormikProps, FormikValues } from 'formik'\nimport './g-checkbox.scss'\n\ninterface GFormikCheckboxProps<T extends FormikValues> {\n    id: string;\n    label: string;\n    formik: FormikProps<T>;\n    selected: string;\n}\n\nexport function GCheckbox<T extends FormikValues>({ id, label, formik, selected }: GFormikCheckboxProps<T>) {\n    return (\n        <div className=\"g-checkbox\">\n            <Checkbox\n                className=\"item-checkbox\"\n                aria-label={label}\n                name={id}\n                id={id}\n                checked={formik.values[selected]}\n                onChange={formik.handleChange}\n            />\n            <Typography variant=\"body1\" >{label}</Typography>\n        </div>\n    )\n}\n\nexport default GCheckbox\n","import { Box,  Divider, Typography } from '@mui/material';\nimport { useFormik } from 'formik';\nimport GButton from '../common/button/GButton';\nimport GCheckbox from '../common/checkobx/GCheckbox';\nimport './notification-view.scss'\n\n\ninterface Notification{\n    text:string;\n    selected:string;\n}\n\ninterface Notifications{\n    text: string\n    notifications: Notification[];\n}\n\nexport default function NotificationView() {\n\n    const initialState: any = {\n        machineIlding_SS: true,\n        machineIlding_PM: false,\n        bookingSchheduling_PM: false,\n        bookingSchheduling_DPCM: false,\n        bookingApproval_DPCM: false,\n        bookingApproval_PM: true,\n    }\n\n    const machineIlding: Notifications = {\n        text: \"Machine Ilding\",\n        notifications: [\n            { text: \"Project Manager\", selected: \"machineIlding_PM\" },\n            { text: \"Site Supervisor\", selected: \"machineIlding_SS\" }\n        ]       \n    };\n\n    const bookingSchheduling: Notifications = {\n        text: \"Booking Schedule Changes\",\n        notifications: [\n            { text: \"Project Manager\", selected: \"bookingSchheduling_PM\" },\n            { text: \"Deputy PM/Construction Manager\", selected: \"bookingSchheduling_DPCM\" }\n        ]\n    };\n\n    const bookingApproval: Notifications = {\n        text: \"Booking Approval Status\",\n        notifications: [\n            { text: \"Project Manager\", selected: \"bookingApproval_PM\" },\n            { text: \"Deputy PM/Construction Manager\", selected: \"bookingApproval_DPCM\" }\n        ]\n    };\n\n    const allNotifications : Notifications[] = [\n        machineIlding, bookingSchheduling, bookingApproval\n    ];\n\n    const formik = useFormik({\n        initialValues: initialState,\n        onSubmit: (data) => {\n        },\n    });\n\n    return (\n        <Box className=\"admin-view\">\n            <Typography className=\"heading\" variant=\"h5\" component=\"h2\">Notifications</Typography>\n            <Divider />\n            <form onSubmit={formik.handleSubmit}>\n            {(allNotifications || []).map((notif) => <Box className=\"sub-section\">\n                {notif && <Typography className=\"heading\" variant=\"h6\" component=\"div\">{notif.text}</Typography>}\n                {(notif.notifications || []).map((item, index) =>\n                   <Box className=\"item\">                            \n                        <GCheckbox \n                        selected={item.selected} \n                        formik={formik} \n                        id={item.selected} \n                        label={item.text}/>\n               </Box>\n                )}\n            </Box>)}\n            <GButton type=\"submit\" title='Update Changes' className='update-changes' />\n            </form>\n        </Box>\n    )\n}\n","interface Columns {\n  id: string;\n  label: string;\n  align?: string;\n  minWidth?: number;\n  maxWidth?: number;\n}\n\n\n// User Management Starts //\n\nexport const UserManagementColumns: Columns[] = [\n  {\n    id:\"username\",\n    label: \"Username\",\n  },\n  {\n    id:\"company\",\n    label: \"Company\",\n  },\n  {\n    id:\"email\",\n    label: \"Email\",\n  },\n  {\n    id:\"userRole\",\n    label: \"User Role\",\n  },\n  {\n    id:\"action\",\n    label: \"Action\",\n  },\n]\n\ninterface USerManagementRows {\n  username: string;\n  userRole: string;\n  company: string;\n  action: string;\n}\n\nexport const UserManagementRows: USerManagementRows[] = [\n  {\n    username:\"Admin A\",\n    userRole: \"Project Manager\",\n    company:\"Santarli\",\n    action:\"Edit/Remove\"\n  },\n  {\n    username:\"Admin B\",\n    userRole: \"Project Manager\",\n    company:\"Santarli\",\n    action:\"Edit/Remove\"\n  },\n  {\n    username:\"Admin C\",\n    userRole: \"SubCon\",\n    company:\"Company XYZ\",\n    action:\"Edit/Remove\"\n  },\n]\n\n//User Management Ends //\n\n//Matrial Management Starts //\nexport const MaterialColumns: Columns[] = [\n  {\n    id: \"image\",\n    label: \"Image\",\n  },\n  {\n    id: \"imageCount\",\n    label: \"Image Count\",\n  },\n  {\n    id: \"materialName\",\n    label: \"Material Name\",\n  },\n  {\n    id: \"action\",\n    label: \"Action\",\n  },\n];\n\ninterface MaterialRows {\n  image: string;\n  imageCount: number;\n  materialName: string;\n  action: string;\n}\n\nexport const MaterialRows: MaterialRows[] = [\n  {\n    image: \"/assets/images/material1.jfif\",\n    imageCount: 1,\n    materialName: \"Rebar\",\n    action: \"Edit/Remove\",\n  },\n  {\n    image: \"/assets/images/material2.jpg\",\n    imageCount: 1,\n    materialName: \"Cement\",\n    action: \"Edit/Remove\",\n  },\n  {\n    image: \"/assets/images/material2.jpg\",\n    imageCount: 1,\n    materialName: \"Bucket\",\n    action: \"Edit/Remove\",\n  },\n];\n\n//Material Management Ends //\n\n//Role Management Starts //\n\nexport const RoleColumns: Columns[] = [\n  {\n    id: \"role\",\n    label: \"Roles\",\n  },\n  {\n    id: \"action\",\n    label: \"Action\",\n  },\n];\n\ninterface RoleRows {\n  role: string;\n  action: string;\n}\n\nexport const RoleRows: RoleRows[] = [\n  {\n    role: \"Project Manager\",\n    action: \"Edit/Remove\",\n  },\n  {\n    role: \"Deputy PM/Construction manager\",\n    action: \"Edit/Remove\",\n  },\n  {\n    role: \"Site Engineer/Senior Site Supervisor\",\n    action: \"Edit/Remove\",\n  },\n  {\n    role: \"Project Manager\",\n    action: \"Edit/Remove\",\n  },\n  {\n    role: \"Sub Contractor\",\n    action: \"Edit/Remove\",\n  },\n];\n\n// Role Management Ends //\n\n// Activity Management Starts //\n\nexport const ActivityColumns: Columns[] = [\n  {\n    id: \"activityName\",\n    label: \"Activity Name\",\n  },\n  {\n    id: \"hoursTaken\",\n    label: \"Hours Taken\",\n  },\n  {\n    id: \"action\",\n    label: \"Action\",\n  },\n];\n\ninterface ActivityRows {\n  activityName: string;\n  hoursTaken: string;\n  action: string;\n}\n\nexport const ActivityRows: ActivityRows[] = [\n  {\n    activityName: \"Rebar\",\n    hoursTaken: \"4 hours\",\n    action: \"Edit/Remove\",\n  },\n  {\n    activityName: \"Rebar\",\n    hoursTaken: \"4 hours\",\n    action: \"Edit/Remove\",\n  },\n];\n\n// Activity Management Ends //\n\n// Maintanance management starts //\n\nexport const MaintenanceColumns: Columns[] = [\n  {\n    id: \"contractor\",\n    label: \"Contractor\",\n  },\n  {\n    id: \"scheduleName\",\n    label: \"Schedule Name\",\n  },\n  {\n    id: \"scheduleType\",\n    label: \"Schedule Type\",\n  },\n  {\n    id: \"location\",\n    label: \"Location\",\n  },\n  {\n    id: \"crane\",\n    label: \"Crane\",\n  },\n  {\n    id: \"schedule\",\n    label: \"Schedule\",\n  },\n  {\n    id: \"time\",\n    label: \"Time\",\n  },\n  {\n    id: \"duration\",\n    label: \"Duration\",\n  },\n  {\n    id: \"assignedTo\",\n    label: \"Assigned To\",\n  },\n  {\n    id: \"action\",\n    label: \"Action\",\n  },\n];\n\ninterface MaintenanceRows {\n  contractor: string;\n  scheduleName: string;\n  scheduleType: string;\n  location: string;\n  crane: string;\n  schedule: string;\n  time: string;\n  duration: string;\n  assignedTo: string;\n  action: string;\n}\n\nexport const MaintenanceRows: MaintenanceRows[] = [\n  {\n    contractor: \"Zhang Keng Enginering\",\n    scheduleName: \"Maintenance\",\n    scheduleType: \"Planned\",\n    location: \"All Crane\",\n    crane: \"All Crane\",\n    schedule: \"Monthly 9th\",\n    time: \"1:00PM - 2:00PM\",\n    duration: \"1 Hr\",\n    assignedTo: \"Project Manager\",\n    action: \"Edit/Remove\",\n  },\n  {\n    contractor: \"Zhang Keng Enginering\",\n    scheduleName: \"Maintenance\",\n    scheduleType: \"Planned\",\n    location: \"All Crane\",\n    crane: \"All Crane\",\n    schedule: \"Monthly 9th\",\n    time: \"1:00PM - 2:00PM\",\n    duration: \"1 Hr\",\n    assignedTo: \"Project Manager\",\n    action: \"Edit/Remove\",\n  },\n];\n\n// Maintanance management ends //\n\n// Crane Usage Management Starts //\n\nexport const CraneManagementColumns: Columns[] = [\n  {\n    id: \"crane\",\n    label: \"Crane\",\n  },\n  {\n    id: \"zone\",\n    label: \"Zone\",\n  },\n  {\n    id: \"bookingHours\",\n    label: \"Booking Hours\",\n  },\n  {\n    id: \"bookingDays\",\n    label: \"Booking Days\",\n  },\n  {\n    id: \"action\",\n    label: \"Action\",\n  },\n];\n\ninterface CraneUsageRows {\n  crane: string;\n  bookingHours: string;\n  zone: string;\n  bookingDays: string;\n  action: string;\n}\n\nexport const CraneUsageRows : CraneUsageRows[] = [\n  {\n    crane: \"Crane A\",\n    zone: \"Zone 1\",\n    bookingHours: \"8Pm -5Pm\",\n    bookingDays: \"Mon,Tue,Wed,Thur,Fri,Sat\",\n    action: \"Edit/Remove\",\n  },\n  {\n    crane: \"Crane B\",\n    zone: \"Zone 2\",\n    bookingHours: \"8Pm -5Pm\",\n    bookingDays: \"Mon,Tue,Wed,Thur,Fri,Sat\",\n    action: \"Edit/Remove\",\n  },\n  {\n    crane: \"Crane A\",\n    zone: \"Zone 1\",\n    bookingHours: \"8Pm -5Pm\",\n    bookingDays: \"Mon,Tue,Wed,Thur,Fri,Sat\",\n    action: \"Edit/Remove\",\n  },\n  {\n    crane: \"Crane C\",\n    zone: \"Zone 2\",\n    bookingHours: \"8Pm -5Pm\",\n    bookingDays: \"Mon,Tue,Wed,Thur,Fri,Sat\",\n    action: \"Edit/Remove\",\n  },\n]\n\n// Crance Usage Management Ends //\n\n// Company Management Starts //\n\nexport const CompanyColumns: Columns[] = [\n  {\n    id: \"company\",\n    label: \"Company\",\n  },\n  {\n    id: \"action\",\n    label: \"Action\",\n  },\n];\n\ninterface CompanyRows {\n  company: string;\n  action: string;\n}\n\nexport const CompanyRows: CompanyRows[] = [\n  {\n    company: \"Groundup.AI\",\n    action: \"Edit/Remove\",\n  },\n  {\n    company: \"ABC PVT.LTD\",\n    action: \"Edit/Remove\",\n  },\n];\n\n\n// Company Management Ends //\n","import * as Yup from \"yup\";\n\nexport const AddActivityFormValidation = Yup.object().shape({\n    activity: Yup\n        .string()\n        .required('Activity is required'),\n});\n\nexport default AddActivityFormValidation","import { useFormik } from 'formik';\nimport GDialog from '../../../../common/dialog/GDialog';\nimport { GFormInput } from '../../../../common/input/GInput';\nimport ActivityValidation from './ActivityValidation'\n\ninterface ActivityFormFields {\n    activity: string;\n}\n\ninterface AddActivityProps {\n    open: boolean;\n    showDialog: (status: boolean) => void;\n    handleSubmit: (data: any) => void;\n}\nexport default function AddActivity({ open, showDialog, handleSubmit }: AddActivityProps) {\n    const initialValues: ActivityFormFields = { activity: '' };\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        validationSchema: ActivityValidation,\n        validateOnChange: false,\n        onSubmit: (data) => {\n            handleSubmit(data)\n        },\n    });\n    return (\n        <GDialog title=\"Activity Management\" open={open} showDialog={showDialog}>\n            <form id=\"request-new-form\" className=\"groundup-form\" onSubmit={formik.handleSubmit}>\n                <GFormInput<ActivityFormFields> formik={formik} id=\"activity\" label=\"Activity Name\" />\n            </form >\n        </GDialog >\n    )\n}\n","import { Box, Typography, Divider } from '@mui/material'\nimport { useState } from 'react'\nimport { ActivityColumns, ActivityRows } from '../../../../mockData/AdminPanel'\nimport GButton from '../../../common/button/GButton'\nimport GTable from '../../../common/table/GTable'\nimport '../../admin-view.scss'\nimport AddActivity from './add-activity/AddActivity'\nimport './activity-management.scss'\n\nexport default function ActivityManagement() {\n    const [open, setOpen] = useState(false);\n    const handleShowDialog = (status: boolean) => {\n        setOpen(status);\n    }\n    return (\n        <Box className=\"activity-management-view\">\n            <Typography className=\"heading\" variant=\"h5\" component=\"h2\">Activity Management</Typography>\n            <Divider />\n            <GButton title='Add Activity' size='small' className='activity-management-btn add-button' onClick={()=>setOpen(true)}/>\n            <AddActivity open={open} showDialog={handleShowDialog} handleSubmit={() => { setOpen(false) }} />\n            <GTable rowClicked={(data: any) => { }} rows={ActivityRows} columns={ActivityColumns} />\n        </Box>\n    )\n}\n","import { Box, Typography, Divider } from '@mui/material'\nimport React from 'react'\nimport { CraneUsageRows, CraneManagementColumns } from '../../../../mockData/AdminPanel'\nimport GButton from '../../../common/button/GButton'\nimport GTable from '../../../common/table/GTable'\nimport '../../admin-view.scss'\nimport './crane-booking.scss'\n\nexport default function CraneBookingManagement() {\n    return (\n        <Box className=\"crane-booking-management-view\">\n            <Typography className=\"heading\" variant=\"h5\" component=\"h2\">Crane Booking Management</Typography>\n            <Divider/>\n            <GButton title='Add Sub Contractors' size='small' className='crane-management-btn add-button' />\n            <GTable rowClicked={(data: any) => {}} rows={CraneUsageRows} columns={CraneManagementColumns} />\n        </Box>\n    )\n}\n","import { InputLabel, Input, Typography, TextField } from '@mui/material'\nimport { FormikProps, FormikValues } from 'formik'\nimport './g-textarea.scss'\n\ninterface GFormInputProps<T extends FormikValues> {\n    formik: FormikProps<T>\n    id: string;\n    label: string;\n    fullWidth?: boolean;\n    rows?: number;\n}\n\nexport function GTextarea<T extends FormikValues>({ formik, id, label, fullWidth = false, rows = 2 }: GFormInputProps<T>) {\n    return (\n        <div className=\"custom-textarea\">\n            <InputLabel id={id}>{label}</InputLabel>\n            <TextField\n                hiddenLabel fullWidth={fullWidth}\n                multiline\n                rows={rows}\n                required id={id} aria-label={id}\n                name={id} autoComplete=\"off\"\n                value={formik.values[id]}\n                onBlur={() => formik.validateField(id)}\n                onChange={formik.handleChange}\n                error={formik.touched[id] && Boolean(formik.errors[id])}\n            />\n\n            {formik.errors[id] &&\n                <Typography variant=\"error\" component=\"div\">\n                    {formik.errors[id]}\n                </Typography>\n            }\n        </div>\n    )\n}\n\n","import * as Yup from \"yup\";\n\nexport const CompanyFormValidation = Yup.object().shape({\n    contracter: Yup\n        .string()\n        .required('Contracter is required'),\n    schedule: Yup\n        .string()\n        .required('Schedule is required'),\n    location: Yup\n        .string()\n        .required('Location is required'),\n    crane: Yup\n        .string()\n        .required('Crane is required'),\n    maintenance: Yup\n        .string()\n        .required('Maintenance  is required'),\n    recurranceDate: Yup\n        .date().nullable().typeError('Invalid Date')\n        .required('Recurrance Date required'),\n    startTime: Yup\n        .date()\n        .required('Start Time  required'),\n    endTime: Yup\n        .date().min(Yup.ref('startTime'),\n        \"End time can't be before start time\")\n        .required('End Time required'),\n    description: Yup\n        .string()\n        .required(),\n});\n\nexport default CompanyFormValidation","import { Grid, TextField } from '@mui/material';\nimport { Box } from '@mui/system';\nimport { Field, useFormik } from 'formik';\nimport { useState } from 'react';\nimport GFormDatePicker, { GDatePicker } from '../../../../common/date-picker/GDatePicker';\nimport GDialog from '../../../../common/dialog/GDialog';\nimport { GFormInput } from '../../../../common/input/GInput';\nimport { GFormSelect, GSelectOption } from '../../../../common/select/GSelect';\nimport { GTextarea } from '../../../../common/textarea/GTextarea';\nimport ScheduleFormValidation from './ScheduleFormValidation'\n\ninterface ScheduleFormFields {\n    contracter: string;\n    schedule: string;\n    location: string;\n    crane: string;\n    maintenance: string;\n    description: string;\n    startTime: string;\n    endTime: string;\n    recurranceDate: Date | null;\n}\n\ninterface AddScheduleProps {\n    open: boolean;\n    showDialog: (status: boolean) => void;\n    handleSubmit: (data: any) => void;\n}\n\n\nexport default function AddSchedule({ open, showDialog, handleSubmit }: AddScheduleProps) {\n    const [date, setDate] = useState<Date | null>(null);\n\n    const initialValues: ScheduleFormFields = {\n        contracter: \"\",\n        schedule: \"\",\n        location: \"\",\n        crane: \"\",\n        maintenance: \"\",\n        description: \"\",\n        startTime: \"\",\n        endTime: \"\",\n        recurranceDate: null,\n    };\n\n    const contracter: GSelectOption[] = [\n        { key: \"contracte1\", value: \"contracter 1\" },\n        { key: \"contracte2\", value: \"contracte 2\" },\n        { key: \"contracte3\", value: \"contracte 3\" }\n    ];\n\n    const schedule: GSelectOption[] = [\n        { key: \"schedule1\", value: \"Schedule 1\" },\n        { key: \"schedule2\", value: \"Schedule 2\" },\n        { key: \"schedule3\", value: \"Schedule 3\" }\n    ];\n\n    const location: GSelectOption[] = [\n        { key: \"location3\", value: \"Location 1\" },\n        { key: \"location2\", value: \"Location 2\" },\n        { key: \"location1\", value: \"Location 3\" }\n    ];\n\n    const crane: GSelectOption[] = [\n        { key: \"crane1\", value: \"Crane 1\" },\n        { key: \"crane2\", value: \"Crane 2\" },\n        { key: \"crane3\", value: \"Crane 3\" }\n    ];\n\n    const maintenance: GSelectOption[] = [\n        { key: \"maintenance1\", value: \"Maintenance 1\" },\n        { key: \"maintenance2\", value: \"Maintenance 2\" },\n        { key: \"maintenance3\", value: \"Maintenance 3\" }\n    ];\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        validateOnChange: false,\n        validationSchema: ScheduleFormValidation,\n        onSubmit: (data) => {\n            handleSubmit(data)\n        },\n    });\n\n    return (\n        <GDialog title=\"Schedule Management\" open={open} showDialog={showDialog}>\n            <form id=\"request-new-form\" className=\"groundup-form\" onSubmit={formik.handleSubmit}>\n                <GFormSelect<ScheduleFormFields> formik={formik} id=\"contracter\" label=\"Contracter\" options={contracter} />\n                <GFormSelect<ScheduleFormFields> formik={formik} id=\"schedule\" label=\"Schedule Name\" options={schedule} />\n                <GFormSelect<ScheduleFormFields> formik={formik} id=\"location\" label=\"Location\" options={location} />\n                <GFormSelect<ScheduleFormFields> formik={formik} id=\"crane\" label=\"Crane\" options={crane} />\n                <GFormSelect<ScheduleFormFields> formik={formik} id=\"maintenance\" label=\"Maintenance Type\" options={maintenance} />\n\n                <Grid xs={12} container>\n                    <Grid xs={4}>\n                        <GFormDatePicker<ScheduleFormFields> formik={formik} id=\"startTime\" label=\"Time Start\" timeonly={true} />\n                    </Grid>\n                    <Grid xs={4}>\n                        <GFormDatePicker<ScheduleFormFields> formik={formik} id=\"endTime\" label=\"End Start\" timeonly={true} />\n                    </Grid>\n                </Grid>\n\n                <GTextarea formik={formik} id=\"description\" label=\"Description\" fullWidth={true} />\n\n                <Box className=\"dropdown\" >\n                    <GFormDatePicker formik={formik} id=\"recurranceDate\" label=\"Recurrance Date\" dateDelete={true} />\n                </Box>\n\n            </form >\n        </GDialog >\n    )\n}\n","import { Box, Typography, Divider } from '@mui/material'\nimport React, { useState } from 'react'\nimport { MaintenanceColumns, MaintenanceRows } from '../../../../mockData/AdminPanel'\nimport GButton from '../../../common/button/GButton'\nimport GTable from '../../../common/table/GTable'\nimport '../../admin-view.scss'\nimport AddSchedule from './add-schedule/AddSchedule'\nimport './maintenance-management.scss'\n\nexport default function MaintenanceManagement() {\n    const [open, setOpen] = useState(false);\n    const handleShowDialog = (status:boolean)=>{\n        setOpen(status);\n    }\n    return (\n        <Box className=\"crane-booking-management-view\">\n            <Typography className=\"heading\" variant=\"h5\" component=\"h2\">Maintenance Management</Typography>\n            <Divider/>\n            <GButton title='Add Schedule' size='small' className='maintenance-management-btn add-button' onClick={()=>setOpen(true)}/>\n            <AddSchedule open={open} showDialog={handleShowDialog} handleSubmit={()=>{setOpen(false)}}/>\n            <GTable rowClicked={(data: any) => {}} rows={MaintenanceRows} columns={MaintenanceColumns} />\n        </Box>\n    )\n}\n","import * as Yup from \"yup\";\n\nexport const AddMaterialFormValidation = Yup.object().shape({\n    material: Yup\n        .string()\n        .required('Material is required'),\n});\n\nexport default AddMaterialFormValidation","import { useFormik } from 'formik';\nimport GDialog from '../../../../common/dialog/GDialog';\nimport { GFormInput } from '../../../../common/input/GInput';\nimport MaterialValidation from './AddMaterialFormValidation'\n\ninterface MaterialFormFields {\n    material: string;\n}\n\ninterface AddMaterialProps {\n    open: boolean;\n    showDialog: (status: boolean) => void;\n    handleSubmit: (data: any) => void;\n}\nexport default function AddMaterial({ open, showDialog, handleSubmit }: AddMaterialProps) {\n    const initialValues: MaterialFormFields = { material: '' };\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        validationSchema: MaterialValidation,\n        validateOnChange: false,\n        onSubmit: (data) => {\n            handleSubmit(data)\n            },\n    });\n    return (\n        <GDialog title=\"Material Management\" open={open} showDialog={showDialog}>\n            <form id=\"request-new-form\" className=\"groundup-form\" onSubmit={formik.handleSubmit}>\n                <GFormInput<MaterialFormFields> formik={formik} id=\"material\" label=\"Material Name\" />\n            </form >\n        </GDialog >\n    )\n}\n","import { Box, Typography, Divider } from '@mui/material'\nimport React, { useState } from 'react'\nimport '../../admin-view.scss'\nimport { MaterialRows, MaterialColumns } from '../../../../mockData/AdminPanel'\nimport GTable from '../../../common/table/GTable'\nimport GButton from '../../../common/button/GButton'\nimport AddMaterial from './add-material/AddMaterial'\nimport './material-management.scss'\n\nexport default function MaterialManagement() {\n    const [open, setOpen] = useState(false);\n    const handleShowDialog = (status: boolean) => {\n        setOpen(status);\n    }\n    return (\n        <Box className=\"crane-booking-management-view\">\n            <Typography className=\"heading\" variant=\"h5\" component=\"h2\">Material Management</Typography>\n            <Divider />\n            <GButton title='Add Materials' size='small' className='material-management-btn add-button' onClick={()=>setOpen(true)}/>\n            <AddMaterial open={open} showDialog={handleShowDialog} handleSubmit={() => { setOpen(false) }} />\n            <GTable rowClicked={(data: any) => { }} rows={MaterialRows} columns={MaterialColumns} />\n        </Box>\n    )\n}","import { Box, Typography, Divider, Checkbox } from '@mui/material'\nimport React from 'react'\nimport { useFormik } from 'formik';\nimport GButton from '../../../common/button/GButton';\nimport GCheckbox from '../../../common/checkobx/GCheckbox';\nimport '../../admin-view.scss'\nimport './reports-management.scss'\n\ninterface Notification{\n    text:string;\n    selected:string;\n}\n\ninterface Notifications{\n    text: string\n    notifications: Notification[];\n}\n\nexport default function ReportsManagement() {\n\n    const initialState: any = {\n        booking_BS: true,\n        booking_BRL: false,\n        crane_CUS: false,\n        crane_CUR: false,\n        crane_IML: false,\n        maintainence_PMR: false,\n        maintainence_ML: true,\n    }\n\n    const booking: Notifications = {\n        text: \"Booking\",\n        notifications : [\n            {text: \"Booking Summary\", selected: \"booking_BS\"},\n            {text: \"Booking Record list\", selected: \"booking_BRL\"}\n        ]\n    };\n\n    const crane: Notifications = {\n        text: \"Crane\",\n        notifications : [\n            {text: \"Crane Utilisation Summary\", selected: \"crane_CUS\"},\n            {text: \"Crane Utilization Records\", selected: \"crane_CUR\"},\n            {text: \"Indentified Materials List\", selected: \"crane_IML\"}\n        ]\n    };\n\n    const maintainence: Notifications = {\n        text: \"Maintainance\",\n        notifications : [\n            {text: \"Planned Maintainance Records\", selected: \"maintainence_PMR\"},\n            {text: \"Materials lifted\", selected: \"maintainence_ML\"}\n        ]\n    };\n\n    const allNotifications : Notifications[] = [\n        booking, crane, maintainence\n    ];\n\n    const formik = useFormik({\n        initialValues: initialState,\n        onSubmit: (data) => {\n        },\n    });\n\n    return (\n        <Box className=\"reports-view\">\n            <Typography className=\"heading\" variant=\"h5\" component=\"h2\">Reports Management</Typography>\n            <Divider/>\n            <form onSubmit={formik.handleSubmit}>\n            {(allNotifications || []).map((notif) => <Box className=\"sub-section\">\n                {notif && <Typography className=\"heading\" variant=\"h6\" component=\"div\">{notif.text}</Typography>}\n                {(notif.notifications || [] ).map((item, index)=>  \n                    <Box className=\"item\">                            \n                        <GCheckbox \n                        selected={item.selected} \n                        formik={formik} \n                        id={item.selected} \n                        label={item.text}/>\n                    </Box>\n                )}\n            </Box>)}\n            <GButton type=\"submit\" title='Save Changes' className=\"update-changes\" />\n            </form>\n\n        </Box>\n    )\n}\n","import * as Yup from \"yup\";\n\nexport const RoleFormValidation = Yup.object().shape({\n    role: Yup\n        .string()\n        .required('Role is required'),\n});\n\nexport default RoleFormValidation","import { useFormik } from 'formik';\nimport GDialog from '../../../../common/dialog/GDialog';\nimport { GFormInput } from '../../../../common/input/GInput';\nimport RoleFormValidation from './RoleFormValidation'\nimport { Grid, InputLabel } from '@mui/material'\nimport { Box } from '@mui/system';\nimport GCheckbox from '../../../../common/checkobx/GCheckbox';\n\ninterface RoleFormFields {\n    role: string;\n    maintenance: boolean;\n    machineIdling: boolean;\n    approvedRejectedBooking: boolean;\n    rescheduleBooking: boolean;\n    canelledBooking: boolean;\n    updateBooking: boolean;\n    newbooking: boolean;\n}\n\ninterface AddRoleProps {\n    open: boolean;\n    showDialog: (status: boolean) => void;\n    handleSubmit: (data: any) => void;\n}\n\ninterface CheckBoxFields {\n    id: string;\n    label: string;\n}\n\nconst checkBoxes: CheckBoxFields[] = [\n    { id: \"newbooking\", label: \"New Booking\" },\n    { id: \"updateBooking\", label: \"Update Booking\" },\n    { id: \"canelledBooking\", label: \"Cancelled Booking\" },\n    { id: \"rescheduleBooking\", label: \"Reschedule Booking\" },\n    { id: \"approvedRejectedBooking\", label: \"Approved/ Rejected Booking\" },\n    { id: \"machineIdling\", label: \"Machine Idling\" },\n    { id: \"maintenance\", label: \"Maintenance\" },]\n\n\nexport default function AddRole({ open, showDialog, handleSubmit }: AddRoleProps) {\n    const initialValues: RoleFormFields = {\n        role: '',\n        maintenance: true,\n        machineIdling: true,\n        approvedRejectedBooking: true,\n        rescheduleBooking: true,\n        canelledBooking: true,\n        updateBooking: true,\n        newbooking: true\n    };\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        validateOnChange: false,\n        validationSchema: RoleFormValidation,\n        onSubmit: (data) => {\n            handleSubmit(data)\n        },\n    });\n\n    return (\n        <GDialog size='large'  title=\"Role Management\" open={open} showDialog={showDialog}>\n            <form id=\"request-new-form\" className=\"groundup-form\" onSubmit={formik.handleSubmit}>\n                <GFormInput<RoleFormFields> formik={formik} id=\"role\" label=\"User Role\" />\n                <InputLabel id=\"notification\">Notification</InputLabel>\n                <Grid xs={12} container>\n\n                    {checkBoxes.map((item, index) => {\n                        return (\n                            <Grid xs={6}>\n                                <Box className=\"item\">\n                                    <GCheckbox\n                                        selected={item.id}\n                                        formik={formik}\n                                        id={item.id}\n                                        label={item.label} />\n                                </Box>\n                            </Grid>\n                        )\n                    })}\n\n                </Grid>\n            </form >\n        </GDialog >\n    )\n}\n","import { Box, Typography, Divider, Alert, LinearProgress } from '@mui/material'\nimport React, { useEffect, useState } from 'react'\nimport '../../admin-view.scss'\nimport {  RoleColumns } from '../../../../mockData/AdminPanel';\nimport GTable from '../../../common/table/GTable';\nimport GButton from '../../../common/button/GButton';\nimport AddRole from './add-role/AddRole';\nimport './role-management.scss'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { roleActionCreators } from '../../../../store/action-creators'\nimport { bindActionCreators } from 'redux';\nimport { roleState } from '../../../../store/reducers/roleReducer';\nimport { RootState } from '../../../../store/reducers';\n\ninterface RoleRowsTypes {\n    role: string;\n    action: string;\n}\n\nexport default function RoleManagement() {\n    const [open, setOpen] = useState(false);\n    const handleShowDialog = (status: boolean) => {\n        setOpen(status);\n    }\n    const dispatch = useDispatch();\n    const { fetchRoles } = bindActionCreators(roleActionCreators, dispatch)\n    const { roles, error, loading }: roleState = useSelector((state: RootState) => state.role);\n\n    const [roleManagementRows, setRoleManagementRows] = useState<RoleRowsTypes[]>([]);\n    const tempRoleManagementRows: RoleRowsTypes[] = []\n\n    useEffect(() => {\n        fetchRoles()\n    }, [])\n\n    useEffect(() => {\n        (roles || []).map((role, index) => {\n            tempRoleManagementRows.push({\n                role: role['name'],\n                action: \"Edit/Remove\"\n            })\n        })\n        setRoleManagementRows( tempRoleManagementRows)\n    }, [roles])\n\n    return (\n        <Box >\n            {loading === true ? (<LinearProgress />)\n                : loading === false && error !== '' ? <Alert severity=\"error\">{error}</Alert> :\n                    <>\n                        <Box className=\"crane-booking-management-view\">\n                            <Typography className=\"heading\" variant=\"h5\" component=\"h2\">Role Management</Typography>\n                            <Divider />\n                            <GButton title='Add Role' size='small' className='role-management-btn add-button' onClick={() => setOpen(true)} />\n                            <AddRole open={open} showDialog={handleShowDialog} handleSubmit={() => { setOpen(false) }} />\n                            <GTable rowClicked={(data: any) => { }} rows={roleManagementRows} columns={RoleColumns} />\n                        </Box>\n                    </>\n            }\n        </Box>\n    )\n}\n","import * as Yup from \"yup\";\n\nexport const AddUserFormValidation = Yup.object().shape({\n    email: Yup\n        .string()\n        .email('Enter a valid email')\n        .required('Email is required'),\n    username: Yup\n        .string()\n        .required('User Name is required'),\n    company: Yup\n        .string()\n        .required(\"Company is required\"),\n    role: Yup\n        .string()\n        .required(\"Role is required\")\n});\n\nexport default AddUserFormValidation","import { useFormik } from 'formik';\nimport GDialog from '../../../../common/dialog/GDialog';\nimport { GFormSelect, GSelectOption } from '../../../../common/select/GSelect';\nimport { GFormInput } from '../../../../common/input/GInput';\nimport AddUserFormValidation from './AddUserFormValidation'\nimport { bindActionCreators } from 'redux';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { companyActionCreators, roleActionCreators, userActionCreators } from '../../../../../store/action-creators';\nimport { CreateUserState } from '../../../../../store/reducers/userReducer';\nimport { RootState } from '../../../../../store/reducers';\nimport { Alert, LinearProgress } from '@mui/material';\nimport { companyState } from '../../../../../store/reducers/companyReducer';\nimport { useEffect, useState } from 'react';\nimport { roleState } from '../../../../../store/reducers/roleReducer';\n\ninterface UserFormFields {\n    username: string;\n    company: string | number;\n    email: string;\n    role: string | number;\n}\n\ninterface AddUserProps {\n    open: boolean;\n    showDialog: (status: boolean) => void;\n    handleSubmit: (data: any) => void;\n}\n\n\nexport default function AddUser({ open, showDialog, handleSubmit }: AddUserProps) {\n    const initialValues: UserFormFields = { username: '', company: '', email: '', role: '' };\n    const dispatch = useDispatch();\n    const { createNewUser } = bindActionCreators(userActionCreators, dispatch)\n    const { error, loading }: CreateUserState = useSelector((state: RootState) => state.createUser);\n    \n    const { fetchCompany } = bindActionCreators(companyActionCreators, dispatch)\n    const { company }: companyState = useSelector((state: RootState) => state.company);\n    \n    const { fetchRoles } = bindActionCreators(roleActionCreators, dispatch)\n    const { roles }: roleState = useSelector((state: RootState) => state.role);\n\n    const [companyOptions, setCompanyOptions] = useState<GSelectOption[]>([]);\n    const [rolesOptions, setRolesOptions] = useState<GSelectOption[]>([]);\n\n    useEffect(() => {\n        fetchCompany()\n        fetchRoles()\n    }, [])\n\n    useEffect(() => {\n        const tempCompanies:GSelectOption[] =[];\n        (company || []).map((companyDetails) => {\n            tempCompanies.push({ key: `${companyDetails['_id']}`, value: `${companyDetails['name']}` })\n        })\n        setCompanyOptions(tempCompanies);\n    }, [company])\n\n    useEffect(() => {\n        const tempRoles:GSelectOption[] =[];\n        (roles || []).map((roleDetails) => {\n            tempRoles.push({ key: `${roleDetails['_id']}`, value: `${roleDetails['name']}` })\n        })\n        setRolesOptions(tempRoles);\n    }, [roles])\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        validateOnChange: false,\n        validationSchema: AddUserFormValidation,\n        onSubmit: (data) => {\n            createNewUser(formik.values.email, 'password', formik.values.username, formik.values.role, formik.values.company)\n        },\n    });\n\n    return (\n        <>\n            <GDialog title=\"User Management\" open={open} showDialog={showDialog}>\n                <form id=\"request-new-form\" className=\"groundup-form\" onSubmit={formik.handleSubmit}>\n                    <GFormInput<UserFormFields> formik={formik} id=\"username\" label=\"User Name\" />\n                    <GFormSelect<UserFormFields> formik={formik} id=\"company\" label=\"Company\" options={companyOptions} />\n                    <GFormInput<UserFormFields> formik={formik} id=\"email\" label=\"Email\" />\n                    <GFormSelect<UserFormFields> formik={formik} id=\"role\" label=\"Role\" options={rolesOptions} />\n                </form >\n            </GDialog >\n        </>\n    )\n}","import { useFormik } from 'formik'\nimport { useDispatch } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { userActionCreators } from '../../../../../store/action-creators'\nimport GDialog from '../../../../common/dialog/GDialog'\nimport { GFormInput } from '../../../../common/input/GInput'\n\ninterface EditUserProps {\n    open: boolean;\n    showDialog: (status: boolean) => void;\n    handleSubmit: () => void;\n    editUserData: any;\n}\n\ninterface UserFormFields {\n    username: string;\n    email: string;\n}\n\nconst EditUser = ({ open, showDialog, handleSubmit, editUserData = { username: '', email: '' } }: EditUserProps) => {\n\n    const dispatch = useDispatch();\n    const { updateUser } = bindActionCreators(userActionCreators, dispatch)\n\n    const initialState = {\n        username: editUserData.username,\n        email: editUserData.email,\n    }\n\n    const formik = useFormik({\n        initialValues: initialState,\n        onSubmit: (data) => {\n            handleSubmit()\n            updateUser(editUserData._id, formik.values.email, formik.values.username)\n        },\n        validateOnChange: false,\n    })\n    return (\n        <GDialog title=\"Edit User\" open={open} showDialog={showDialog}>\n            <form id=\"request-new-form\" className=\"groundup-form\" onSubmit={formik.handleSubmit}>\n                <GFormInput<UserFormFields> formik={formik} id=\"username\" label=\"User Name\" />\n                <GFormInput<UserFormFields> formik={formik} id=\"email\" label=\"Email\" />\n            </form >\n        </GDialog >\n    )\n}\n\nexport default EditUser\n","import { Box, Typography, Divider, Alert } from '@mui/material'\nimport { useEffect, useState } from 'react'\nimport { UserManagementColumns } from '../../../../mockData/AdminPanel'\nimport GButton from '../../../common/button/GButton'\nimport GTable from '../../../common/table/GTable'\nimport '../../admin-view.scss'\nimport { RootState } from '../../../../store/reducers';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { userActionCreators } from '../../../../store/action-creators'\nimport { bindActionCreators } from 'redux'\nimport AddUser from './add-user/AddUser'\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { UserState, DeleteUserState } from '../../../../store/reducers/userReducer'\nimport EditUser from './edit-user/EditUser'\n\nexport interface UserManagementRowsTypes {\n    username: string;\n    email: string;\n    userRole: string;\n    company: string;\n    action: string;\n    _id: number;\n}\n\nexport default function UserManagement() {\n    const [open, setOpen] = useState(false);\n    const handleShowDialog = (status: boolean) => {\n        setOpen(status);\n    }\n\n    const [openEditDialog, setOpenEditDialog] = useState(false);\n    const handleShowEditDialog = (status: boolean) => {\n        setOpenEditDialog(status);\n    }\n\n    const dispatch = useDispatch();\n    const { fetchUsers } = bindActionCreators(userActionCreators, dispatch)\n    const { users, error, loading }: UserState = useSelector((state: RootState) => state.user);\n\n    const { removeUser } = bindActionCreators(userActionCreators, dispatch)\n    const { deleteLError, deleteLoading }: DeleteUserState = useSelector((state: RootState) => state.removeUser);\n\n    const [editUserData, setEditUserData] = useState<UserManagementRowsTypes>();\n    const [userManagementRows, setUserManagementRows] = useState<UserManagementRowsTypes[]>([]);\n    const tempUserManagementRows: UserManagementRowsTypes[] = []\n\n    useEffect(() => {\n        fetchUsers()\n    }, [])\n\n    useEffect(() => {\n        (users || []).map((user, index) => {\n            tempUserManagementRows.push({\n                username: user['name'],\n                company: \"NA\",\n                email: user['email'],\n                userRole: \"NA\",\n                action: \"Edit/Remove\",\n                _id: user['_id']\n            })\n        })\n        setUserManagementRows(tempUserManagementRows)\n    }, [users])\n\n    const rowClicked = (data: UserManagementRowsTypes)=>{\n        setEditUserData(data); \n        setOpenEditDialog(true); \n    }\n\n    return (\n        <Box >\n            {loading === true ? (<LinearProgress />)\n                : loading === false && error !== '' ? <Alert severity=\"error\">{error}</Alert> :\n                    <>\n                        <Typography className=\"heading\" variant=\"h5\" component=\"h2\">User Management</Typography>\n                        <Divider />\n                        <GButton className='user-management-btn add-button' title='Add User' size='small' onClick={() => setOpen(true)} />\n                        <GTable editlicked={rowClicked} deleteClicked={(id) => { removeUser(id) }} rowClicked={(data: any) => { }} rows={userManagementRows} columns={UserManagementColumns} />\n                        {/* Dialogs */}\n                        <AddUser open={open} showDialog={handleShowDialog} handleSubmit={() => { setOpen(false) }} />\n                        {openEditDialog && <EditUser editUserData={editUserData} open={openEditDialog} showDialog={handleShowEditDialog} handleSubmit={() => { setOpenEditDialog(false) }} />}\n                    </>\n            }\n\n        </Box>\n    )\n}\n","import * as Yup from \"yup\";\n\nexport const CompanyFormValidation = Yup.object().shape({\n    company: Yup\n        .string()\n        .required('Company is required'),\n\n    address: Yup\n        .string()\n        .required('Address is required'),\n\n    phone: Yup\n        .number()\n        .required('Phone is required'),\n});\n\nexport default CompanyFormValidation","import { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { companyActionCreators } from '../../../../../store/action-creators';\nimport { createCompany } from '../../../../../store/action-creators/companyActionCreators';\nimport GDialog from '../../../../common/dialog/GDialog';\nimport { GFormInput } from '../../../../common/input/GInput';\nimport CompanyFormValidation from './CompanyFormValidation'\nimport { RootState } from '../../../../../store/reducers';\n\ninterface CompanyFormFields {\n    company: string;\n    address: string;\n    phone: number;\n}\n\ninterface AddCompanyProps {\n    open: boolean;\n    showDialog: (status: boolean) => void;\n    handleSubmit: (data: any) => void;\n}\n\nexport default function AddCompany({ open, showDialog, handleSubmit }: AddCompanyProps) {\n    const initialValues: CompanyFormFields = { company: '', address: '', phone: 0 };\n\n    const dispatch = useDispatch();\n    const { createCompany } = bindActionCreators(companyActionCreators, dispatch)\n    const { error, loading } = useSelector((state: RootState) => state.createCompany)\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        validateOnChange: false,\n        validationSchema: CompanyFormValidation,\n        onSubmit: (data) => {\n            createCompany(formik.values.company, formik.values.address, formik.values.phone)\n        },\n    });\n\n    return (\n        <GDialog title=\"Add Company\" open={open} showDialog={showDialog}>\n            <form id=\"request-new-form\" className=\"groundup-form\" onSubmit={formik.handleSubmit}>\n                <GFormInput<CompanyFormFields> formik={formik} id=\"company\" label=\"Company\" />\n                <GFormInput<CompanyFormFields> formik={formik} id=\"address\" label=\"Address\" />\n                <GFormInput<CompanyFormFields> formik={formik} id=\"phone\" label=\"Phone\" />\n            </form >\n        </GDialog >\n    )\n}\n","import { Box, Typography, Divider, LinearProgress, Alert } from '@mui/material'\nimport React, { useEffect, useState } from 'react'\nimport '../../admin-view.scss'\nimport { CompanyRows, CompanyColumns } from '../../../../mockData/AdminPanel';\nimport GTable from '../../../common/table/GTable';\nimport GButton from '../../../common/button/GButton';\nimport AddCompany from './add-company/AddCompany';\nimport './company-management.scss'\nimport { RootState } from '../../../../store/reducers';\nimport { companyState } from '../../../../store/reducers/companyReducer';\nimport { bindActionCreators } from 'redux';\nimport { companyActionCreators } from '../../../../store/action-creators'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteCompany } from '../../../../store/action-creators/companyActionCreators';\n\ninterface CompanyRowsTypes {\n    company: string;\n    action: string;\n    _id: number;\n}\n\nexport default function CompanyManagement() {\n    const [open, setOpen] = useState(false);\n    const handleShowDialog = (status: boolean) => {\n        setOpen(status);\n    }\n\n    const dispatch = useDispatch();\n    const { fetchCompany, deleteCompany } = bindActionCreators(companyActionCreators, dispatch)\n    const { company, error, loading }: companyState = useSelector((state: RootState) => state.company);\n\n    const [companyManagementRows, setcompanyManagementRows] = useState<CompanyRowsTypes[]>([]);\n    const tempcompanyManagementRows: CompanyRowsTypes[] = []\n\n    \n\n    useEffect(() => {\n        fetchCompany()\n    }, [])\n\n    useEffect(() => {\n        (company || []).map((company, index) => {\n            tempcompanyManagementRows.push({\n                company: company['name'],\n                action: \"Edit/Remove\",\n                _id : company['_id']\n            })\n        })\n        setcompanyManagementRows(tempcompanyManagementRows)\n    }, [company])\n\n\n    return (\n        <Box >\n            {loading === true ? (<LinearProgress />)\n                : loading === false && error !== '' ? <Alert severity=\"error\">{error}</Alert> :\n                    <>\n                        <Box className=\"company-management-view\">\n                            <Typography className=\"heading\" variant=\"h5\" component=\"h2\">Company Management</Typography>\n                            <Divider />\n                            <GButton title='Add Comapny' size='small' className='company-management-btn add-button' onClick={() => setOpen(true)} />\n                            <AddCompany open={open} showDialog={handleShowDialog} handleSubmit={() => { setOpen(false) }} />\n                            <GTable rowClicked={(data: any) => { }} deleteClicked={(data) => deleteCompany(data)} rows={companyManagementRows} columns={CompanyColumns} />\n                        </Box>\n                    </>\n            }\n        </Box>\n\n    )\n}\n","import { Switch, Route } from 'react-router-dom';\nimport { USER_ADMIN_USER_MANAGEMENT, USER_ADMIN_ROLE_MANAGEMENT, USER_ADMIN_MATERIAL_MANAGEMENT, USER_ADMIN_ACTIVITY_MANAGEMENT, USER_ADMIN_MAINTENANCE_MANAGEMENT, USER_ADMIN_CRANE_BOOKING_MANAGEMENT, USER_ADMIN_REPORTS_MANAGEMENT,USER_ADMIN_COMPANY_MANAGEMENT } from '../../constants/ContextPaths';\nimport './admin-view.scss'\nimport ActivityManagement from './management/activity/ActivityManagement';\nimport CraneBookingManagement from './management/crane-booking/CraneBookingManagement';\nimport MaintenanceManagement from './management/maintenance/MaintenanceManagement';\nimport MaterialManagement from './management/material/MaterialManagement';\nimport ReportsManagement from './management/reports/ReportsManagement';\nimport RoleManagement from './management/role/RoleManagement';\nimport UserManagement from './management/user/UserManagement';\nimport CompanyManagement from './management/company/CompanyManagement';\nimport { Box } from '@mui/material';\n\nexport default function AdminView() {\n    return (\n        <Box className=\"admin-view\">\n            <Switch>\n                <Route path={USER_ADMIN_USER_MANAGEMENT}>\n                    <UserManagement/>\n                </Route>\n                <Route path={USER_ADMIN_ROLE_MANAGEMENT}>\n                    <RoleManagement/>\n                </Route>\n                <Route path={USER_ADMIN_MATERIAL_MANAGEMENT}>\n                    <MaterialManagement/>\n                </Route>\n                <Route path={USER_ADMIN_ACTIVITY_MANAGEMENT}>\n                    <ActivityManagement/>\n                </Route>\n                <Route path={USER_ADMIN_MAINTENANCE_MANAGEMENT}>\n                    <MaintenanceManagement/>\n                </Route>\n                <Route path={USER_ADMIN_CRANE_BOOKING_MANAGEMENT}>\n                    <CraneBookingManagement/>\n                </Route>\n                <Route path={USER_ADMIN_REPORTS_MANAGEMENT}>\n                    <ReportsManagement/>\n                </Route>\n                <Route path={USER_ADMIN_COMPANY_MANAGEMENT}>\n                    <CompanyManagement/>\n                </Route>\n            </Switch>\n        </Box>\n    )\n}\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom'\nimport NotificationView from '../../components/notification-view/NotificationView';\nimport GroundUpDrawer from '../../components/common/drawer/GDrawer'\nimport GroundUpAppBar from '../../components/common/header/GroundUpAppBar'\nimport { USER_ADMIN, USER_ADMIN_ACTIVITY_MANAGEMENT, USER_ADMIN_CRANE_BOOKING_MANAGEMENT, USER_ADMIN_MAINTENANCE_MANAGEMENT, USER_ADMIN_MATERIAL_MANAGEMENT, USER_ADMIN_REPORTS_MANAGEMENT, USER_ADMIN_ROLE_MANAGEMENT, USER_ADMIN_USER_MANAGEMENT, USER_ADMIN_COMPANY_MANAGEMENT, USER_NOTIFICATION } from '../../constants/ContextPaths';\nimport AdminView from '../../components/admin-view/AdminView';\n\nexport default function Settings() {\n    const [open, setOpen] = React.useState(false);\n    const [headerTab, setHeaderTab] = React.useState(-1);\n\n    const handleDrawerToggle = () => {\n        setOpen(!open);\n    };\n    const drawerItems = [\n        {\n            text:'Admin',\n            id: USER_ADMIN,\n            subMenu : [\n                {text:'User Management', id: USER_ADMIN_USER_MANAGEMENT },\n                {text:'Role Management', id: USER_ADMIN_ROLE_MANAGEMENT },\n                {text:'Company Management', id: USER_ADMIN_COMPANY_MANAGEMENT },\n                {text:'Material Management', id: USER_ADMIN_MATERIAL_MANAGEMENT },\n                {text:'Activity Management', id: USER_ADMIN_ACTIVITY_MANAGEMENT },\n                {text:'Maintenance Management', id: USER_ADMIN_MAINTENANCE_MANAGEMENT },\n                {text:'Crane Booking Management', id: USER_ADMIN_CRANE_BOOKING_MANAGEMENT },\n                {text:'Reports', id: USER_ADMIN_REPORTS_MANAGEMENT },\n            ]\n        }\n    ]\n    return (\n        <div>\n            <GroundUpAppBar headerTab={headerTab} setHeaderTab={setHeaderTab} handleDrawerToggle={handleDrawerToggle}/>\n            <GroundUpDrawer items={drawerItems} mobileOpen={open} handleDrawerToggle={handleDrawerToggle}>\n                <Switch>\n                    <Route path={USER_NOTIFICATION}>\n                        <NotificationView/>\n                    </Route>\n                    <Route path={USER_ADMIN}>\n                        <AdminView/>\n                    </Route>\n                </Switch>\n            </GroundUpDrawer> \n        </div>\n    )\n}\n","import React from 'react'\nimport SignIn from './container/sign-in/SignIn';\nimport Home from './container/home/Home';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { ADMIN, HOME, ROOT, USER } from './constants/ContextPaths';\nimport Settings from './container/settings/Settings';\nimport { green, grey } from '@mui/material/colors';\nimport { color } from '@mui/system';\n\ndeclare module '@mui/material/styles' {\n    interface TypographyVariants {\n      error: React.CSSProperties;\n      paneheader: React.CSSProperties;\n    }\n  \n    // allow configuration using `createTheme`\n    interface TypographyVariantsOptions {\n      error?: React.CSSProperties;\n      paneheader: React.CSSProperties;\n    }\n  }\n  \n  // Update the Typography's variant prop options\n  declare module '@mui/material/Typography' {\n    interface TypographyPropsVariantOverrides {\n      error: true;\n      paneheader:true;\n    }\n  }\n  \n  const theme = createTheme({\n    typography: {\n      h3:{\n        fontSize: '2rem',\n        fontWeight: 500,\n        color:grey[600]\n      },\n      h4:{\n        fontSize: '1.5rem',\n        fontWeight: 500,\n        color:grey[600]\n      },\n      h5:{\n        fontSize: '1.25rem',\n        fontWeight: 500,\n        color:grey[800]\n      },\n      h6:{\n        fontSize: '1.1rem',\n        color:grey[600]\n      },\n      subtitle2: {\n        color: grey[600]\n      },\n      body1: {\n        color: grey[800]\n      },\n      paneheader:{\n        fontSize: '.9rem',\n        fontWeight: 700,\n        color:grey[600]\n      },\n      error:{\n        color: 'red',\n        fontSize: '.8rem',\n        lineHeight: '1.3'\n      }\n    },\n    palette:{\n      secondary:{\n        main: grey[200],\n        dark: grey[400],\n        contrastText: 'white',\n      },\n      success:{\n        main: green[500],\n        contrastText: 'white'\n      }\n    },\n    components:{\n      MuiAppBar:{\n        styleOverrides:{\n          root:{\n            backgroundColor: 'white',\n            color: '#00000099'\n          }\n        }\n      }\n    }\n  });\n  \nexport default theme;","import React from 'react'\nimport StatusHeader from '../../components/common/status-header/StatusHeader'\n\n// Render Sample Component here \n\nexport default function Sample() {\n    return (\n        <div>\n\n            <StatusHeader/>\n            \n        </div>\n    )\n}\n","import axios from 'axios';\nimport { LOGIN_USER } from './constants/Api';\n\nexport default function HttpInterceptor() {\n    const BASE_URL = 'http://13.212.88.14:3000/api/v1'\n    // For GET requests\n    axios.interceptors.request.use(request => {\n            // Add configurations here\n            if(request.url?.indexOf(BASE_URL)==-1){\n                request.url = BASE_URL + request.url\n            }\n            if(request.url?.indexOf(LOGIN_USER)==-1){\n                request.headers = {\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\n                    'Content-Type': 'application/json'\n                }\n            }else{\n                request.headers = {\n                    'Content-Type': 'application/json'\n                }\n            }\n            return request;\n        },\n        (err) => {\n            return Promise.reject(err);\n        }\n    );\n    \n    // For POST requests\n    axios.interceptors.response.use(request=> {\n            // Add configurations here\n            if (request.status === 201) {\n                console.log('Posted Successfully');\n            }\n            return request;\n        },\n        (err) => {\n            return Promise.reject(err);\n        }\n    );\n    return (\n        <>\n        </>\n    )\n}\n","import './App.scss';\nimport {\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport SignIn from './container/sign-in/SignIn';\nimport Home from './container/home/Home';\nimport { ThemeProvider } from '@mui/material/styles';\nimport { HOME, ROOT, USER } from './constants/ContextPaths';\nimport Settings from './container/settings/Settings';\nimport theme from './Theme';\nimport Sample from './container/sample/Sample';\nimport HttpInterceptor from './HttpInterceptor';\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <HttpInterceptor/>\n      <div className=\"App\">\n        <Switch>\n          <Route path={ROOT} exact>\n            <SignIn />\n          </Route>\n          <Route path={HOME}>\n            <Home/>\n          </Route>\n          <Route path={USER}>\n            <Settings/>\n          </Route>\n          {/* Sample route to render and test components */}\n          <Route path={'/sample'}>  \n            <Sample />\n          </Route>\n        </Switch>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { userActionTypes, createUserActionTypes, deleteUserActionTypes, editUserActionTypes } from '../action-types/userActionTypes';\nimport { Action } from '../actions/userActions';\n\n\n// Get User\n\nexport interface UserState {\n    users: [],\n    loading: boolean,\n    error: string\n}\n\nexport const initialState: UserState = {\n    users: [],\n    loading: true,\n    error: ''\n}\n\nconst UserReducer = (state: UserState = initialState, action: Action) => {\n    switch (action.type) {\n        case userActionTypes.GET_USERS:\n            return { ...state, loading: true };\n\n        case userActionTypes.GET_USERS_FAILED:\n            return { ...state, loading: false, users: [], error: action.payload };\n\n        case userActionTypes.GET_USERS_SUCCESS:\n            return { ...state, users: action.payload, loading: false, error: '' };\n        default:\n            return state;\n    }\n}\n\nexport default UserReducer;\n\n\n// Create User\n\nexport interface CreateUserState {\n    loading: boolean,\n    error: string\n}\n\nexport const createUserInitialState: CreateUserState = {\n    loading: true,\n    error: '',\n}\n\nexport const createUserReducer = (state: CreateUserState = createUserInitialState, action: Action) => {\n    switch (action.type) {\n        case createUserActionTypes.CREATE_USER:\n            return { ...state, loading: true, error: '', };\n\n        case createUserActionTypes.CREATE_USER_FAILED:\n            return { ...state, loading: false, error: action.payload };\n\n        case createUserActionTypes.CREATE_USER_SUCCESS:\n            return { ...state, loading: false, error: '' };\n\n        default:\n            return state;\n    }\n}\n\n// delete User\n\nexport interface DeleteUserState {\n    deleteLoading: boolean,\n    deleteLError: string\n}\n\nexport const deleteInitialState: DeleteUserState = {\n    deleteLoading: true,\n    deleteLError: ''\n}\n\nexport const deleteUserReducer = (state: DeleteUserState = deleteInitialState, action: Action) => {\n    switch (action.type) {\n        case deleteUserActionTypes.DELETE_USER:\n            return { ...state, deleteLoading: true, deleteLError: '', };\n\n        case deleteUserActionTypes.DELETE_USER_FAILED:\n            return { ...state, deleteLoading: false, deleteLError: action.payload };\n\n        case deleteUserActionTypes.DELETE_USER_SUCCESS:\n            return { ...state, deleteLoading: false, deleteLError: '' };\n            \n        default:\n            return state;\n    }\n}\n\n// Edit User\n\nexport interface EditUserState {\n    editLoading: boolean,\n    editLError: string\n}\n\nexport const editUserInitialState: EditUserState = {\n    editLoading: true,\n    editLError: ''\n}\n\nexport const editUserReducer = (state: EditUserState = editUserInitialState, action: Action) => {\n    switch (action.type) {\n        case editUserActionTypes.EDIT_USER:\n            return { ...state, editLoading: true, editLError: '', };\n\n        case editUserActionTypes.EDIT_USER_FAILED:\n            return { ...state, editLoading: false, editLError: action.payload };\n\n        case editUserActionTypes.EDIT_USER_SUCCESS:\n            return { ...state, editLoading: false, editLError: '' };\n            \n        default:\n            return state;\n    }\n}","import { BookingsActionTypes } from '../action-types/bookingsActionTypes';\nimport { Action } from '../actions/bookingsAction';\n\n\nexport interface BookingsState {\n    data: [],\n    loading: boolean,\n    error: string\n}\n\nexport const initialState: BookingsState = {\n    data: [],\n    loading: true,\n    error: ''\n}\n\nconst bookingReducer = (state: any = initialState, action: Action) => {\n    switch (action.type) {\n        case BookingsActionTypes.BOOKINGS_FAILED:\n            return { ...state, loading: false, users: [], error: action.payload };\n        case BookingsActionTypes.ALL_BOOKINGS:\n            return { ...state, loading: false, data: action.payload, error: '' };\n        default:\n            return state;\n    }\n}\n\nexport default bookingReducer;","import { LoginActionTypes } from '../action-types/loginActionTypes';\nimport {Action} from '../actions/loginAction';\n\ninterface LoginState {\n    username: string;\n    status: boolean;\n}\nexport const initialState: LoginState ={\n    username: '',\n    status: false\n} \n\nconst loginReducer = (state: LoginState = initialState, action: Action)=>{\n    switch(action.type){\n        case LoginActionTypes.LOGGED_IN_USER:\n            return {...state, username: action.payload, status: \"success\"};\n        case LoginActionTypes.LOGGED_IN_USER_FAILED:\n            return {...state, username: action.payload, status: \"failed\"};\n        default:\n            return state;\n    }\n}\n\nexport default loginReducer;","import { RolesActionTypes } from '../action-types/roleActionTypes';\nimport { Action } from '../actions/roleActions';\n\nexport interface roleState {\n    roles: [],\n    loading: boolean,\n    error: string\n}\n\nexport const initialState: roleState = {\n    roles: [],\n    loading: true,\n    error: ''\n}\n\nconst roleReducer = (state: roleState = initialState, action: Action) => {\n    switch (action.type) {\n        case RolesActionTypes.GET_ROLES:\n            return { ...state, loading: true };\n\n        case RolesActionTypes.GET_ROLES_FAILED:\n            return { ...state, loading: false, roles: [], error: action.payload };\n\n        case RolesActionTypes.GET_ROLES_SUCCESS:\n            return { ...state, roles: action.payload, loading: false, error: '' };\n        default:\n            return state;\n    }\n}\n\nexport default roleReducer;","import { CompanyActionTypes } from '../action-types/companyActionTypes';\nimport { Action } from '../actions/companyActions';\n\n// Get Comapny\nexport interface companyState {\n    company: [],\n    loading: boolean,\n    error: string\n}\n\nexport const initialState: companyState = {\n    company: [],\n    loading: true,\n    error: ''\n}\n\nconst companyReducer = (state: companyState = initialState, action: Action) => {\n    switch (action.type) {\n        case CompanyActionTypes.GET_COMPANY:\n            return { ...state, loading: true };\n\n        case CompanyActionTypes.GET_COMPANY_FAILED:\n            return { ...state, loading: false, company: [], error: action.payload };\n\n        case CompanyActionTypes.GET_COMPANY_SUCCESS:\n            return { ...state, company: action.payload, loading: false, error: '' };\n        default:\n            return state;\n    }\n}\nexport default companyReducer;\n\n// Create Comapny\n\nexport interface createCompanyState {\n    loading: boolean,\n    error: string\n}\n\nexport const createCompanyInitialState: createCompanyState = {\n    loading: true,\n    error: ''\n}\n\nexport const createCompanyReducer = (state: createCompanyState = createCompanyInitialState, action: Action) => {\n    switch (action.type) {\n        case CompanyActionTypes.CREATE_COMPANY:\n            return { ...state, loading: true };\n\n        case CompanyActionTypes.CREATE_COMPANY_FAILED:\n            return { ...state, loading: false, error: action.payload };\n\n        case CompanyActionTypes.CREATE_COMPANY_SUCCESS:\n            return { ...state, loading: false, error: '' };\n        default:\n            return state;\n    }\n}\n\n// Delete Comapny\n\nexport interface deleteCompanyState {\n    loading: boolean,\n    error: string\n}\n\nexport const deleteCompanyInitialState: deleteCompanyState = {\n    loading: true,\n    error: ''\n}\n\nexport const deleteCompanyReducer = (state: deleteCompanyState = deleteCompanyInitialState, action: Action) => {\n    switch (action.type) {\n        case CompanyActionTypes.DELETE_COMPANY:\n            return { ...state, loading: true };\n\n        case CompanyActionTypes.DELETE_COMPANY_FAILED:\n            return { ...state, loading: false, error: action.payload };\n\n        case CompanyActionTypes.DELETE_COMPANY_SUCCESS:\n            return { ...state, loading: false, error: '' };\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from \"redux\";\nimport userReducer, { createUserReducer, deleteUserReducer, editUserReducer } from \"./userReducer\";\nimport bookingReducer from \"./bookings\";\nimport loginReducer from \"./loginReducer\";\nimport roleReducer from \"./roleReducer\";\nimport companyReducer, { createCompanyReducer, deleteCompanyReducer } from \"./companyReducer\";\n\nconst reducers = combineReducers({\n    login : loginReducer,\n\n    role : roleReducer,\n\n    bookings: bookingReducer,\n\n    user : userReducer,\n    createUser : createUserReducer,\n    removeUser : deleteUserReducer,\n    editUser : editUserReducer,\n\n    company : companyReducer,\n    createCompany : createCompanyReducer,\n    deleteCompany : deleteCompanyReducer\n\n});\n\nexport default reducers;\n\nexport type RootState = ReturnType<typeof reducers>;","import { applyMiddleware, createStore } from \"redux\";\nimport reducers from './reducers';\nimport thunk from 'redux-thunk';\nimport { useDispatch } from \"react-redux\";\n\nexport const store = createStore(\n  reducers,\n  {},\n  applyMiddleware(thunk)\n)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\nimport 'jquery/dist/jquery.min.js'\nimport 'bootstrap/dist/js/bootstrap.min.js'\nimport {store} from './store/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}